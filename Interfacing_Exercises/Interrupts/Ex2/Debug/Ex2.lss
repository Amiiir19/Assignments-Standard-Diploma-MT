
Ex2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000008f6  0000096a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000099c  00000000  00000000  0000096c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000be8  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001ef0  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f04  2**2
                  CONTENTS, READONLY
  6 .debug_info   000004e6  00000000  00000000  00001f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a3  00000000  00000000  00002426  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  000028c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  000028e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ae 01 	call	0x35c	; 0x35c <main>
  64:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_2>:
#define F_CPU 8000000UL

#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
ISR(INT1_vect) {
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
  74:	0f 92       	push	r0
  76:	11 24       	eor	r1, r1
  78:	2f 93       	push	r18
  7a:	3f 93       	push	r19
  7c:	4f 93       	push	r20
  7e:	5f 93       	push	r21
  80:	6f 93       	push	r22
  82:	7f 93       	push	r23
  84:	8f 93       	push	r24
  86:	9f 93       	push	r25
  88:	af 93       	push	r26
  8a:	bf 93       	push	r27
  8c:	ef 93       	push	r30
  8e:	ff 93       	push	r31
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
  98:	6e 97       	sbiw	r28, 0x1e	; 30
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61
	int i = 0;
  9e:	1a 82       	std	Y+2, r1	; 0x02
  a0:	19 82       	std	Y+1, r1	; 0x01
	PORTC |= (1 << 0) | (1 << 1) | (1 << 2);
  a2:	85 e3       	ldi	r24, 0x35	; 53
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	25 e3       	ldi	r18, 0x35	; 53
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	f9 01       	movw	r30, r18
  ac:	20 81       	ld	r18, Z
  ae:	27 60       	ori	r18, 0x07	; 7
  b0:	fc 01       	movw	r30, r24
  b2:	20 83       	st	Z, r18
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	aa e7       	ldi	r26, 0x7A	; 122
  ba:	b4 e4       	ldi	r27, 0x44	; 68
  bc:	8f 83       	std	Y+7, r24	; 0x07
  be:	98 87       	std	Y+8, r25	; 0x08
  c0:	a9 87       	std	Y+9, r26	; 0x09
  c2:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	4a ef       	ldi	r20, 0xFA	; 250
  ca:	54 e4       	ldi	r21, 0x44	; 68
  cc:	6f 81       	ldd	r22, Y+7	; 0x07
  ce:	78 85       	ldd	r23, Y+8	; 0x08
  d0:	89 85       	ldd	r24, Y+9	; 0x09
  d2:	9a 85       	ldd	r25, Y+10	; 0x0a
  d4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__mulsf3>
  d8:	dc 01       	movw	r26, r24
  da:	cb 01       	movw	r24, r22
  dc:	8b 87       	std	Y+11, r24	; 0x0b
  de:	9c 87       	std	Y+12, r25	; 0x0c
  e0:	ad 87       	std	Y+13, r26	; 0x0d
  e2:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	40 e8       	ldi	r20, 0x80	; 128
  ea:	5f e3       	ldi	r21, 0x3F	; 63
  ec:	6b 85       	ldd	r22, Y+11	; 0x0b
  ee:	7c 85       	ldd	r23, Y+12	; 0x0c
  f0:	8d 85       	ldd	r24, Y+13	; 0x0d
  f2:	9e 85       	ldd	r25, Y+14	; 0x0e
  f4:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__cmpsf2>
  f8:	88 23       	and	r24, r24
  fa:	2c f4       	brge	.+10     	; 0x106 <__vector_2+0x9a>
		__ticks = 1;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	98 8b       	std	Y+16, r25	; 0x10
 102:	8f 87       	std	Y+15, r24	; 0x0f
 104:	3f c0       	rjmp	.+126    	; 0x184 <__vector_2+0x118>
	else if (__tmp > 65535)
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	3f ef       	ldi	r19, 0xFF	; 255
 10a:	4f e7       	ldi	r20, 0x7F	; 127
 10c:	57 e4       	ldi	r21, 0x47	; 71
 10e:	6b 85       	ldd	r22, Y+11	; 0x0b
 110:	7c 85       	ldd	r23, Y+12	; 0x0c
 112:	8d 85       	ldd	r24, Y+13	; 0x0d
 114:	9e 85       	ldd	r25, Y+14	; 0x0e
 116:	0e 94 df 03 	call	0x7be	; 0x7be <__gesf2>
 11a:	18 16       	cp	r1, r24
 11c:	4c f5       	brge	.+82     	; 0x170 <__vector_2+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	40 e2       	ldi	r20, 0x20	; 32
 124:	51 e4       	ldi	r21, 0x41	; 65
 126:	6f 81       	ldd	r22, Y+7	; 0x07
 128:	78 85       	ldd	r23, Y+8	; 0x08
 12a:	89 85       	ldd	r24, Y+9	; 0x09
 12c:	9a 85       	ldd	r25, Y+10	; 0x0a
 12e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__mulsf3>
 132:	dc 01       	movw	r26, r24
 134:	cb 01       	movw	r24, r22
 136:	bc 01       	movw	r22, r24
 138:	cd 01       	movw	r24, r26
 13a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__fixunssfsi>
 13e:	dc 01       	movw	r26, r24
 140:	cb 01       	movw	r24, r22
 142:	98 8b       	std	Y+16, r25	; 0x10
 144:	8f 87       	std	Y+15, r24	; 0x0f
 146:	0f c0       	rjmp	.+30     	; 0x166 <__vector_2+0xfa>
 148:	88 ec       	ldi	r24, 0xC8	; 200
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	9a 8b       	std	Y+18, r25	; 0x12
 14e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 150:	89 89       	ldd	r24, Y+17	; 0x11
 152:	9a 89       	ldd	r25, Y+18	; 0x12
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <__vector_2+0xe8>
 158:	9a 8b       	std	Y+18, r25	; 0x12
 15a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 15c:	8f 85       	ldd	r24, Y+15	; 0x0f
 15e:	98 89       	ldd	r25, Y+16	; 0x10
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	98 8b       	std	Y+16, r25	; 0x10
 164:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 166:	8f 85       	ldd	r24, Y+15	; 0x0f
 168:	98 89       	ldd	r25, Y+16	; 0x10
 16a:	89 2b       	or	r24, r25
 16c:	69 f7       	brne	.-38     	; 0x148 <__vector_2+0xdc>
 16e:	14 c0       	rjmp	.+40     	; 0x198 <__vector_2+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 170:	6b 85       	ldd	r22, Y+11	; 0x0b
 172:	7c 85       	ldd	r23, Y+12	; 0x0c
 174:	8d 85       	ldd	r24, Y+13	; 0x0d
 176:	9e 85       	ldd	r25, Y+14	; 0x0e
 178:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__fixunssfsi>
 17c:	dc 01       	movw	r26, r24
 17e:	cb 01       	movw	r24, r22
 180:	98 8b       	std	Y+16, r25	; 0x10
 182:	8f 87       	std	Y+15, r24	; 0x0f
 184:	8f 85       	ldd	r24, Y+15	; 0x0f
 186:	98 89       	ldd	r25, Y+16	; 0x10
 188:	9c 8b       	std	Y+20, r25	; 0x14
 18a:	8b 8b       	std	Y+19, r24	; 0x13
 18c:	8b 89       	ldd	r24, Y+19	; 0x13
 18e:	9c 89       	ldd	r25, Y+20	; 0x14
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <__vector_2+0x124>
 194:	9c 8b       	std	Y+20, r25	; 0x14
 196:	8b 8b       	std	Y+19, r24	; 0x13
	_delay_ms(1000);
	for (i = 0; i < 4; i++) {
 198:	1a 82       	std	Y+2, r1	; 0x02
 19a:	19 82       	std	Y+1, r1	; 0x01
 19c:	81 c0       	rjmp	.+258    	; 0x2a0 <__vector_2+0x234>
		PORTC ^= (1 << 0) ^ (1 << 1) ^ (1 << 2);
 19e:	85 e3       	ldi	r24, 0x35	; 53
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	25 e3       	ldi	r18, 0x35	; 53
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	f9 01       	movw	r30, r18
 1a8:	30 81       	ld	r19, Z
 1aa:	27 e0       	ldi	r18, 0x07	; 7
 1ac:	23 27       	eor	r18, r19
 1ae:	fc 01       	movw	r30, r24
 1b0:	20 83       	st	Z, r18
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	aa e7       	ldi	r26, 0x7A	; 122
 1b8:	b4 e4       	ldi	r27, 0x44	; 68
 1ba:	8b 83       	std	Y+3, r24	; 0x03
 1bc:	9c 83       	std	Y+4, r25	; 0x04
 1be:	ad 83       	std	Y+5, r26	; 0x05
 1c0:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	4a ef       	ldi	r20, 0xFA	; 250
 1c8:	54 e4       	ldi	r21, 0x44	; 68
 1ca:	6b 81       	ldd	r22, Y+3	; 0x03
 1cc:	7c 81       	ldd	r23, Y+4	; 0x04
 1ce:	8d 81       	ldd	r24, Y+5	; 0x05
 1d0:	9e 81       	ldd	r25, Y+6	; 0x06
 1d2:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__mulsf3>
 1d6:	dc 01       	movw	r26, r24
 1d8:	cb 01       	movw	r24, r22
 1da:	8d 8b       	std	Y+21, r24	; 0x15
 1dc:	9e 8b       	std	Y+22, r25	; 0x16
 1de:	af 8b       	std	Y+23, r26	; 0x17
 1e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	40 e8       	ldi	r20, 0x80	; 128
 1e8:	5f e3       	ldi	r21, 0x3F	; 63
 1ea:	6d 89       	ldd	r22, Y+21	; 0x15
 1ec:	7e 89       	ldd	r23, Y+22	; 0x16
 1ee:	8f 89       	ldd	r24, Y+23	; 0x17
 1f0:	98 8d       	ldd	r25, Y+24	; 0x18
 1f2:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__cmpsf2>
 1f6:	88 23       	and	r24, r24
 1f8:	2c f4       	brge	.+10     	; 0x204 <__vector_2+0x198>
		__ticks = 1;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	9a 8f       	std	Y+26, r25	; 0x1a
 200:	89 8f       	std	Y+25, r24	; 0x19
 202:	3f c0       	rjmp	.+126    	; 0x282 <__vector_2+0x216>
	else if (__tmp > 65535)
 204:	20 e0       	ldi	r18, 0x00	; 0
 206:	3f ef       	ldi	r19, 0xFF	; 255
 208:	4f e7       	ldi	r20, 0x7F	; 127
 20a:	57 e4       	ldi	r21, 0x47	; 71
 20c:	6d 89       	ldd	r22, Y+21	; 0x15
 20e:	7e 89       	ldd	r23, Y+22	; 0x16
 210:	8f 89       	ldd	r24, Y+23	; 0x17
 212:	98 8d       	ldd	r25, Y+24	; 0x18
 214:	0e 94 df 03 	call	0x7be	; 0x7be <__gesf2>
 218:	18 16       	cp	r1, r24
 21a:	4c f5       	brge	.+82     	; 0x26e <__vector_2+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 21c:	20 e0       	ldi	r18, 0x00	; 0
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	40 e2       	ldi	r20, 0x20	; 32
 222:	51 e4       	ldi	r21, 0x41	; 65
 224:	6b 81       	ldd	r22, Y+3	; 0x03
 226:	7c 81       	ldd	r23, Y+4	; 0x04
 228:	8d 81       	ldd	r24, Y+5	; 0x05
 22a:	9e 81       	ldd	r25, Y+6	; 0x06
 22c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__mulsf3>
 230:	dc 01       	movw	r26, r24
 232:	cb 01       	movw	r24, r22
 234:	bc 01       	movw	r22, r24
 236:	cd 01       	movw	r24, r26
 238:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__fixunssfsi>
 23c:	dc 01       	movw	r26, r24
 23e:	cb 01       	movw	r24, r22
 240:	9a 8f       	std	Y+26, r25	; 0x1a
 242:	89 8f       	std	Y+25, r24	; 0x19
 244:	0f c0       	rjmp	.+30     	; 0x264 <__vector_2+0x1f8>
 246:	88 ec       	ldi	r24, 0xC8	; 200
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	9c 8f       	std	Y+28, r25	; 0x1c
 24c:	8b 8f       	std	Y+27, r24	; 0x1b
 24e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 250:	9c 8d       	ldd	r25, Y+28	; 0x1c
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <__vector_2+0x1e6>
 256:	9c 8f       	std	Y+28, r25	; 0x1c
 258:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 25a:	89 8d       	ldd	r24, Y+25	; 0x19
 25c:	9a 8d       	ldd	r25, Y+26	; 0x1a
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	9a 8f       	std	Y+26, r25	; 0x1a
 262:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 264:	89 8d       	ldd	r24, Y+25	; 0x19
 266:	9a 8d       	ldd	r25, Y+26	; 0x1a
 268:	89 2b       	or	r24, r25
 26a:	69 f7       	brne	.-38     	; 0x246 <__vector_2+0x1da>
 26c:	14 c0       	rjmp	.+40     	; 0x296 <__vector_2+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 26e:	6d 89       	ldd	r22, Y+21	; 0x15
 270:	7e 89       	ldd	r23, Y+22	; 0x16
 272:	8f 89       	ldd	r24, Y+23	; 0x17
 274:	98 8d       	ldd	r25, Y+24	; 0x18
 276:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__fixunssfsi>
 27a:	dc 01       	movw	r26, r24
 27c:	cb 01       	movw	r24, r22
 27e:	9a 8f       	std	Y+26, r25	; 0x1a
 280:	89 8f       	std	Y+25, r24	; 0x19
 282:	89 8d       	ldd	r24, Y+25	; 0x19
 284:	9a 8d       	ldd	r25, Y+26	; 0x1a
 286:	9e 8f       	std	Y+30, r25	; 0x1e
 288:	8d 8f       	std	Y+29, r24	; 0x1d
 28a:	8d 8d       	ldd	r24, Y+29	; 0x1d
 28c:	9e 8d       	ldd	r25, Y+30	; 0x1e
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <__vector_2+0x222>
 292:	9e 8f       	std	Y+30, r25	; 0x1e
 294:	8d 8f       	std	Y+29, r24	; 0x1d
#include <util/delay.h>
ISR(INT1_vect) {
	int i = 0;
	PORTC |= (1 << 0) | (1 << 1) | (1 << 2);
	_delay_ms(1000);
	for (i = 0; i < 4; i++) {
 296:	89 81       	ldd	r24, Y+1	; 0x01
 298:	9a 81       	ldd	r25, Y+2	; 0x02
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	9a 83       	std	Y+2, r25	; 0x02
 29e:	89 83       	std	Y+1, r24	; 0x01
 2a0:	89 81       	ldd	r24, Y+1	; 0x01
 2a2:	9a 81       	ldd	r25, Y+2	; 0x02
 2a4:	04 97       	sbiw	r24, 0x04	; 4
 2a6:	0c f4       	brge	.+2      	; 0x2aa <__vector_2+0x23e>
 2a8:	7a cf       	rjmp	.-268    	; 0x19e <__vector_2+0x132>
		PORTC ^= (1 << 0) ^ (1 << 1) ^ (1 << 2);
		_delay_ms(1000);
	}
	PORTC &= ~(1 << 0) & ~(1 << 1) & ~(1 << 2);
 2aa:	85 e3       	ldi	r24, 0x35	; 53
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	25 e3       	ldi	r18, 0x35	; 53
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	f9 01       	movw	r30, r18
 2b4:	20 81       	ld	r18, Z
 2b6:	28 7f       	andi	r18, 0xF8	; 248
 2b8:	fc 01       	movw	r30, r24
 2ba:	20 83       	st	Z, r18

}
 2bc:	00 00       	nop
 2be:	6e 96       	adiw	r28, 0x1e	; 30
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	f8 94       	cli
 2c4:	de bf       	out	0x3e, r29	; 62
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	cd bf       	out	0x3d, r28	; 61
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	ff 91       	pop	r31
 2d0:	ef 91       	pop	r30
 2d2:	bf 91       	pop	r27
 2d4:	af 91       	pop	r26
 2d6:	9f 91       	pop	r25
 2d8:	8f 91       	pop	r24
 2da:	7f 91       	pop	r23
 2dc:	6f 91       	pop	r22
 2de:	5f 91       	pop	r21
 2e0:	4f 91       	pop	r20
 2e2:	3f 91       	pop	r19
 2e4:	2f 91       	pop	r18
 2e6:	0f 90       	pop	r0
 2e8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

000002f2 <interrupt_init>:

void interrupt_init() {
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
	DDRD &= (1 << 3);
 2fa:	81 e3       	ldi	r24, 0x31	; 49
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	21 e3       	ldi	r18, 0x31	; 49
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	f9 01       	movw	r30, r18
 304:	20 81       	ld	r18, Z
 306:	28 70       	andi	r18, 0x08	; 8
 308:	fc 01       	movw	r30, r24
 30a:	20 83       	st	Z, r18
	//PULL DOWN DONT ACTIVATE PULL UP
	PORTD &= ~(1 << 3);
 30c:	82 e3       	ldi	r24, 0x32	; 50
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	22 e3       	ldi	r18, 0x32	; 50
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	f9 01       	movw	r30, r18
 316:	20 81       	ld	r18, Z
 318:	27 7f       	andi	r18, 0xF7	; 247
 31a:	fc 01       	movw	r30, r24
 31c:	20 83       	st	Z, r18
	//RISING EDGE
	MCUCR |= (1 << ISC11)		;
 31e:	85 e5       	ldi	r24, 0x55	; 85
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	25 e5       	ldi	r18, 0x55	; 85
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	f9 01       	movw	r30, r18
 328:	20 81       	ld	r18, Z
 32a:	28 60       	ori	r18, 0x08	; 8
 32c:	fc 01       	movw	r30, r24
 32e:	20 83       	st	Z, r18
	MCUCR &= ~(1<<ISC10);
 330:	85 e5       	ldi	r24, 0x55	; 85
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	25 e5       	ldi	r18, 0x55	; 85
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	f9 01       	movw	r30, r18
 33a:	20 81       	ld	r18, Z
 33c:	2b 7f       	andi	r18, 0xFB	; 251
 33e:	fc 01       	movw	r30, r24
 340:	20 83       	st	Z, r18
	//ENABLE INTERRUPT 0
	GICR |= (1 << INT1);
 342:	8b e5       	ldi	r24, 0x5B	; 91
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	2b e5       	ldi	r18, 0x5B	; 91
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	f9 01       	movw	r30, r18
 34c:	20 81       	ld	r18, Z
 34e:	20 68       	ori	r18, 0x80	; 128
 350:	fc 01       	movw	r30, r24
 352:	20 83       	st	Z, r18
}
 354:	00 00       	nop
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	08 95       	ret

0000035c <main>:

int main() {
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
 364:	aa 97       	sbiw	r28, 0x2a	; 42
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	f8 94       	cli
 36a:	de bf       	out	0x3e, r29	; 62
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	cd bf       	out	0x3d, r28	; 61

	interrupt_init();
 370:	0e 94 79 01 	call	0x2f2	; 0x2f2 <interrupt_init>
	//Enable INTERRUPT BIT FROM GENERAL BIT 7
	SREG = (1 << 7);
 374:	8f e5       	ldi	r24, 0x5F	; 95
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	20 e8       	ldi	r18, 0x80	; 128
 37a:	fc 01       	movw	r30, r24
 37c:	20 83       	st	Z, r18

	//led init
	DDRC |= (1 << 0) | (1 << 1) | (1 << 2);
 37e:	84 e3       	ldi	r24, 0x34	; 52
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	24 e3       	ldi	r18, 0x34	; 52
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	f9 01       	movw	r30, r18
 388:	20 81       	ld	r18, Z
 38a:	27 60       	ori	r18, 0x07	; 7
 38c:	fc 01       	movw	r30, r24
 38e:	20 83       	st	Z, r18
	/*   AS IT IS POSTIVE LOGIC    */
	PORTC &= ~(1 << 0) & (~(1 << 1)) & (~(1 << 2));
 390:	85 e3       	ldi	r24, 0x35	; 53
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	25 e3       	ldi	r18, 0x35	; 53
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	f9 01       	movw	r30, r18
 39a:	20 81       	ld	r18, Z
 39c:	28 7f       	andi	r18, 0xF8	; 248
 39e:	fc 01       	movw	r30, r24
 3a0:	20 83       	st	Z, r18
	for (;;) {
		PORTC &= ~(1 << 2);
 3a2:	85 e3       	ldi	r24, 0x35	; 53
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	25 e3       	ldi	r18, 0x35	; 53
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	f9 01       	movw	r30, r18
 3ac:	20 81       	ld	r18, Z
 3ae:	2b 7f       	andi	r18, 0xFB	; 251
 3b0:	fc 01       	movw	r30, r24
 3b2:	20 83       	st	Z, r18
		PORTC |= (1 << 0);
 3b4:	85 e3       	ldi	r24, 0x35	; 53
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	25 e3       	ldi	r18, 0x35	; 53
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	f9 01       	movw	r30, r18
 3be:	20 81       	ld	r18, Z
 3c0:	21 60       	ori	r18, 0x01	; 1
 3c2:	fc 01       	movw	r30, r24
 3c4:	20 83       	st	Z, r18
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	aa ef       	ldi	r26, 0xFA	; 250
 3cc:	b3 e4       	ldi	r27, 0x43	; 67
 3ce:	89 83       	std	Y+1, r24	; 0x01
 3d0:	9a 83       	std	Y+2, r25	; 0x02
 3d2:	ab 83       	std	Y+3, r26	; 0x03
 3d4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 3d6:	20 e0       	ldi	r18, 0x00	; 0
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	4a ef       	ldi	r20, 0xFA	; 250
 3dc:	54 e4       	ldi	r21, 0x44	; 68
 3de:	69 81       	ldd	r22, Y+1	; 0x01
 3e0:	7a 81       	ldd	r23, Y+2	; 0x02
 3e2:	8b 81       	ldd	r24, Y+3	; 0x03
 3e4:	9c 81       	ldd	r25, Y+4	; 0x04
 3e6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__mulsf3>
 3ea:	dc 01       	movw	r26, r24
 3ec:	cb 01       	movw	r24, r22
 3ee:	89 a3       	std	Y+33, r24	; 0x21
 3f0:	9a a3       	std	Y+34, r25	; 0x22
 3f2:	ab a3       	std	Y+35, r26	; 0x23
 3f4:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
 3f6:	20 e0       	ldi	r18, 0x00	; 0
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	40 e8       	ldi	r20, 0x80	; 128
 3fc:	5f e3       	ldi	r21, 0x3F	; 63
 3fe:	69 a1       	ldd	r22, Y+33	; 0x21
 400:	7a a1       	ldd	r23, Y+34	; 0x22
 402:	8b a1       	ldd	r24, Y+35	; 0x23
 404:	9c a1       	ldd	r25, Y+36	; 0x24
 406:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__cmpsf2>
 40a:	88 23       	and	r24, r24
 40c:	2c f4       	brge	.+10     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		__ticks = 1;
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	9e a3       	std	Y+38, r25	; 0x26
 414:	8d a3       	std	Y+37, r24	; 0x25
 416:	3f c0       	rjmp	.+126    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
	else if (__tmp > 65535)
 418:	20 e0       	ldi	r18, 0x00	; 0
 41a:	3f ef       	ldi	r19, 0xFF	; 255
 41c:	4f e7       	ldi	r20, 0x7F	; 127
 41e:	57 e4       	ldi	r21, 0x47	; 71
 420:	69 a1       	ldd	r22, Y+33	; 0x21
 422:	7a a1       	ldd	r23, Y+34	; 0x22
 424:	8b a1       	ldd	r24, Y+35	; 0x23
 426:	9c a1       	ldd	r25, Y+36	; 0x24
 428:	0e 94 df 03 	call	0x7be	; 0x7be <__gesf2>
 42c:	18 16       	cp	r1, r24
 42e:	4c f5       	brge	.+82     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 430:	20 e0       	ldi	r18, 0x00	; 0
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	40 e2       	ldi	r20, 0x20	; 32
 436:	51 e4       	ldi	r21, 0x41	; 65
 438:	69 81       	ldd	r22, Y+1	; 0x01
 43a:	7a 81       	ldd	r23, Y+2	; 0x02
 43c:	8b 81       	ldd	r24, Y+3	; 0x03
 43e:	9c 81       	ldd	r25, Y+4	; 0x04
 440:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__mulsf3>
 444:	dc 01       	movw	r26, r24
 446:	cb 01       	movw	r24, r22
 448:	bc 01       	movw	r22, r24
 44a:	cd 01       	movw	r24, r26
 44c:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__fixunssfsi>
 450:	dc 01       	movw	r26, r24
 452:	cb 01       	movw	r24, r22
 454:	9e a3       	std	Y+38, r25	; 0x26
 456:	8d a3       	std	Y+37, r24	; 0x25
 458:	0f c0       	rjmp	.+30     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 45a:	88 ec       	ldi	r24, 0xC8	; 200
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	98 a7       	std	Y+40, r25	; 0x28
 460:	8f a3       	std	Y+39, r24	; 0x27
 462:	8f a1       	ldd	r24, Y+39	; 0x27
 464:	98 a5       	ldd	r25, Y+40	; 0x28
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 46a:	98 a7       	std	Y+40, r25	; 0x28
 46c:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 46e:	8d a1       	ldd	r24, Y+37	; 0x25
 470:	9e a1       	ldd	r25, Y+38	; 0x26
 472:	01 97       	sbiw	r24, 0x01	; 1
 474:	9e a3       	std	Y+38, r25	; 0x26
 476:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 478:	8d a1       	ldd	r24, Y+37	; 0x25
 47a:	9e a1       	ldd	r25, Y+38	; 0x26
 47c:	89 2b       	or	r24, r25
 47e:	69 f7       	brne	.-38     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 480:	14 c0       	rjmp	.+40     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 482:	69 a1       	ldd	r22, Y+33	; 0x21
 484:	7a a1       	ldd	r23, Y+34	; 0x22
 486:	8b a1       	ldd	r24, Y+35	; 0x23
 488:	9c a1       	ldd	r25, Y+36	; 0x24
 48a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__fixunssfsi>
 48e:	dc 01       	movw	r26, r24
 490:	cb 01       	movw	r24, r22
 492:	9e a3       	std	Y+38, r25	; 0x26
 494:	8d a3       	std	Y+37, r24	; 0x25
 496:	8d a1       	ldd	r24, Y+37	; 0x25
 498:	9e a1       	ldd	r25, Y+38	; 0x26
 49a:	9a a7       	std	Y+42, r25	; 0x2a
 49c:	89 a7       	std	Y+41, r24	; 0x29
 49e:	89 a5       	ldd	r24, Y+41	; 0x29
 4a0:	9a a5       	ldd	r25, Y+42	; 0x2a
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 4a6:	9a a7       	std	Y+42, r25	; 0x2a
 4a8:	89 a7       	std	Y+41, r24	; 0x29
		_delay_ms(500);

		PORTC &= ~(1 << 0);
 4aa:	85 e3       	ldi	r24, 0x35	; 53
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	25 e3       	ldi	r18, 0x35	; 53
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	f9 01       	movw	r30, r18
 4b4:	20 81       	ld	r18, Z
 4b6:	2e 7f       	andi	r18, 0xFE	; 254
 4b8:	fc 01       	movw	r30, r24
 4ba:	20 83       	st	Z, r18
		PORTC |= (1 << 1);
 4bc:	85 e3       	ldi	r24, 0x35	; 53
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	25 e3       	ldi	r18, 0x35	; 53
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	f9 01       	movw	r30, r18
 4c6:	20 81       	ld	r18, Z
 4c8:	22 60       	ori	r18, 0x02	; 2
 4ca:	fc 01       	movw	r30, r24
 4cc:	20 83       	st	Z, r18
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	aa ef       	ldi	r26, 0xFA	; 250
 4d4:	b3 e4       	ldi	r27, 0x43	; 67
 4d6:	8d 83       	std	Y+5, r24	; 0x05
 4d8:	9e 83       	std	Y+6, r25	; 0x06
 4da:	af 83       	std	Y+7, r26	; 0x07
 4dc:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 4de:	20 e0       	ldi	r18, 0x00	; 0
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	4a ef       	ldi	r20, 0xFA	; 250
 4e4:	54 e4       	ldi	r21, 0x44	; 68
 4e6:	6d 81       	ldd	r22, Y+5	; 0x05
 4e8:	7e 81       	ldd	r23, Y+6	; 0x06
 4ea:	8f 81       	ldd	r24, Y+7	; 0x07
 4ec:	98 85       	ldd	r25, Y+8	; 0x08
 4ee:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__mulsf3>
 4f2:	dc 01       	movw	r26, r24
 4f4:	cb 01       	movw	r24, r22
 4f6:	8f 8b       	std	Y+23, r24	; 0x17
 4f8:	98 8f       	std	Y+24, r25	; 0x18
 4fa:	a9 8f       	std	Y+25, r26	; 0x19
 4fc:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
 4fe:	20 e0       	ldi	r18, 0x00	; 0
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	40 e8       	ldi	r20, 0x80	; 128
 504:	5f e3       	ldi	r21, 0x3F	; 63
 506:	6f 89       	ldd	r22, Y+23	; 0x17
 508:	78 8d       	ldd	r23, Y+24	; 0x18
 50a:	89 8d       	ldd	r24, Y+25	; 0x19
 50c:	9a 8d       	ldd	r25, Y+26	; 0x1a
 50e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__cmpsf2>
 512:	88 23       	and	r24, r24
 514:	2c f4       	brge	.+10     	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
		__ticks = 1;
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	9c 8f       	std	Y+28, r25	; 0x1c
 51c:	8b 8f       	std	Y+27, r24	; 0x1b
 51e:	3f c0       	rjmp	.+126    	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
	else if (__tmp > 65535)
 520:	20 e0       	ldi	r18, 0x00	; 0
 522:	3f ef       	ldi	r19, 0xFF	; 255
 524:	4f e7       	ldi	r20, 0x7F	; 127
 526:	57 e4       	ldi	r21, 0x47	; 71
 528:	6f 89       	ldd	r22, Y+23	; 0x17
 52a:	78 8d       	ldd	r23, Y+24	; 0x18
 52c:	89 8d       	ldd	r24, Y+25	; 0x19
 52e:	9a 8d       	ldd	r25, Y+26	; 0x1a
 530:	0e 94 df 03 	call	0x7be	; 0x7be <__gesf2>
 534:	18 16       	cp	r1, r24
 536:	4c f5       	brge	.+82     	; 0x58a <__EEPROM_REGION_LENGTH__+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 538:	20 e0       	ldi	r18, 0x00	; 0
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	40 e2       	ldi	r20, 0x20	; 32
 53e:	51 e4       	ldi	r21, 0x41	; 65
 540:	6d 81       	ldd	r22, Y+5	; 0x05
 542:	7e 81       	ldd	r23, Y+6	; 0x06
 544:	8f 81       	ldd	r24, Y+7	; 0x07
 546:	98 85       	ldd	r25, Y+8	; 0x08
 548:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__mulsf3>
 54c:	dc 01       	movw	r26, r24
 54e:	cb 01       	movw	r24, r22
 550:	bc 01       	movw	r22, r24
 552:	cd 01       	movw	r24, r26
 554:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__fixunssfsi>
 558:	dc 01       	movw	r26, r24
 55a:	cb 01       	movw	r24, r22
 55c:	9c 8f       	std	Y+28, r25	; 0x1c
 55e:	8b 8f       	std	Y+27, r24	; 0x1b
 560:	0f c0       	rjmp	.+30     	; 0x580 <__EEPROM_REGION_LENGTH__+0x180>
 562:	88 ec       	ldi	r24, 0xC8	; 200
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	9e 8f       	std	Y+30, r25	; 0x1e
 568:	8d 8f       	std	Y+29, r24	; 0x1d
 56a:	8d 8d       	ldd	r24, Y+29	; 0x1d
 56c:	9e 8d       	ldd	r25, Y+30	; 0x1e
 56e:	01 97       	sbiw	r24, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
 572:	9e 8f       	std	Y+30, r25	; 0x1e
 574:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 576:	8b 8d       	ldd	r24, Y+27	; 0x1b
 578:	9c 8d       	ldd	r25, Y+28	; 0x1c
 57a:	01 97       	sbiw	r24, 0x01	; 1
 57c:	9c 8f       	std	Y+28, r25	; 0x1c
 57e:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 580:	8b 8d       	ldd	r24, Y+27	; 0x1b
 582:	9c 8d       	ldd	r25, Y+28	; 0x1c
 584:	89 2b       	or	r24, r25
 586:	69 f7       	brne	.-38     	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
 588:	14 c0       	rjmp	.+40     	; 0x5b2 <__EEPROM_REGION_LENGTH__+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 58a:	6f 89       	ldd	r22, Y+23	; 0x17
 58c:	78 8d       	ldd	r23, Y+24	; 0x18
 58e:	89 8d       	ldd	r24, Y+25	; 0x19
 590:	9a 8d       	ldd	r25, Y+26	; 0x1a
 592:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__fixunssfsi>
 596:	dc 01       	movw	r26, r24
 598:	cb 01       	movw	r24, r22
 59a:	9c 8f       	std	Y+28, r25	; 0x1c
 59c:	8b 8f       	std	Y+27, r24	; 0x1b
 59e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 5a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
 5a2:	98 a3       	std	Y+32, r25	; 0x20
 5a4:	8f 8f       	std	Y+31, r24	; 0x1f
 5a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
 5a8:	98 a1       	ldd	r25, Y+32	; 0x20
 5aa:	01 97       	sbiw	r24, 0x01	; 1
 5ac:	f1 f7       	brne	.-4      	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
 5ae:	98 a3       	std	Y+32, r25	; 0x20
 5b0:	8f 8f       	std	Y+31, r24	; 0x1f
		_delay_ms(500);

		PORTC &= ~(1 << 1);
 5b2:	85 e3       	ldi	r24, 0x35	; 53
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	25 e3       	ldi	r18, 0x35	; 53
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	f9 01       	movw	r30, r18
 5bc:	20 81       	ld	r18, Z
 5be:	2d 7f       	andi	r18, 0xFD	; 253
 5c0:	fc 01       	movw	r30, r24
 5c2:	20 83       	st	Z, r18
		PORTC |= (1 << 2);
 5c4:	85 e3       	ldi	r24, 0x35	; 53
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	25 e3       	ldi	r18, 0x35	; 53
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	f9 01       	movw	r30, r18
 5ce:	20 81       	ld	r18, Z
 5d0:	24 60       	ori	r18, 0x04	; 4
 5d2:	fc 01       	movw	r30, r24
 5d4:	20 83       	st	Z, r18
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	aa ef       	ldi	r26, 0xFA	; 250
 5dc:	b3 e4       	ldi	r27, 0x43	; 67
 5de:	89 87       	std	Y+9, r24	; 0x09
 5e0:	9a 87       	std	Y+10, r25	; 0x0a
 5e2:	ab 87       	std	Y+11, r26	; 0x0b
 5e4:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 5e6:	20 e0       	ldi	r18, 0x00	; 0
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	4a ef       	ldi	r20, 0xFA	; 250
 5ec:	54 e4       	ldi	r21, 0x44	; 68
 5ee:	69 85       	ldd	r22, Y+9	; 0x09
 5f0:	7a 85       	ldd	r23, Y+10	; 0x0a
 5f2:	8b 85       	ldd	r24, Y+11	; 0x0b
 5f4:	9c 85       	ldd	r25, Y+12	; 0x0c
 5f6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__mulsf3>
 5fa:	dc 01       	movw	r26, r24
 5fc:	cb 01       	movw	r24, r22
 5fe:	8d 87       	std	Y+13, r24	; 0x0d
 600:	9e 87       	std	Y+14, r25	; 0x0e
 602:	af 87       	std	Y+15, r26	; 0x0f
 604:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
 606:	20 e0       	ldi	r18, 0x00	; 0
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	40 e8       	ldi	r20, 0x80	; 128
 60c:	5f e3       	ldi	r21, 0x3F	; 63
 60e:	6d 85       	ldd	r22, Y+13	; 0x0d
 610:	7e 85       	ldd	r23, Y+14	; 0x0e
 612:	8f 85       	ldd	r24, Y+15	; 0x0f
 614:	98 89       	ldd	r25, Y+16	; 0x10
 616:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__cmpsf2>
 61a:	88 23       	and	r24, r24
 61c:	2c f4       	brge	.+10     	; 0x628 <__EEPROM_REGION_LENGTH__+0x228>
		__ticks = 1;
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	9a 8b       	std	Y+18, r25	; 0x12
 624:	89 8b       	std	Y+17, r24	; 0x11
 626:	3f c0       	rjmp	.+126    	; 0x6a6 <__EEPROM_REGION_LENGTH__+0x2a6>
	else if (__tmp > 65535)
 628:	20 e0       	ldi	r18, 0x00	; 0
 62a:	3f ef       	ldi	r19, 0xFF	; 255
 62c:	4f e7       	ldi	r20, 0x7F	; 127
 62e:	57 e4       	ldi	r21, 0x47	; 71
 630:	6d 85       	ldd	r22, Y+13	; 0x0d
 632:	7e 85       	ldd	r23, Y+14	; 0x0e
 634:	8f 85       	ldd	r24, Y+15	; 0x0f
 636:	98 89       	ldd	r25, Y+16	; 0x10
 638:	0e 94 df 03 	call	0x7be	; 0x7be <__gesf2>
 63c:	18 16       	cp	r1, r24
 63e:	4c f5       	brge	.+82     	; 0x692 <__EEPROM_REGION_LENGTH__+0x292>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 640:	20 e0       	ldi	r18, 0x00	; 0
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	40 e2       	ldi	r20, 0x20	; 32
 646:	51 e4       	ldi	r21, 0x41	; 65
 648:	69 85       	ldd	r22, Y+9	; 0x09
 64a:	7a 85       	ldd	r23, Y+10	; 0x0a
 64c:	8b 85       	ldd	r24, Y+11	; 0x0b
 64e:	9c 85       	ldd	r25, Y+12	; 0x0c
 650:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__mulsf3>
 654:	dc 01       	movw	r26, r24
 656:	cb 01       	movw	r24, r22
 658:	bc 01       	movw	r22, r24
 65a:	cd 01       	movw	r24, r26
 65c:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__fixunssfsi>
 660:	dc 01       	movw	r26, r24
 662:	cb 01       	movw	r24, r22
 664:	9a 8b       	std	Y+18, r25	; 0x12
 666:	89 8b       	std	Y+17, r24	; 0x11
 668:	0f c0       	rjmp	.+30     	; 0x688 <__EEPROM_REGION_LENGTH__+0x288>
 66a:	88 ec       	ldi	r24, 0xC8	; 200
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	9c 8b       	std	Y+20, r25	; 0x14
 670:	8b 8b       	std	Y+19, r24	; 0x13
 672:	8b 89       	ldd	r24, Y+19	; 0x13
 674:	9c 89       	ldd	r25, Y+20	; 0x14
 676:	01 97       	sbiw	r24, 0x01	; 1
 678:	f1 f7       	brne	.-4      	; 0x676 <__EEPROM_REGION_LENGTH__+0x276>
 67a:	9c 8b       	std	Y+20, r25	; 0x14
 67c:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 67e:	89 89       	ldd	r24, Y+17	; 0x11
 680:	9a 89       	ldd	r25, Y+18	; 0x12
 682:	01 97       	sbiw	r24, 0x01	; 1
 684:	9a 8b       	std	Y+18, r25	; 0x12
 686:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 688:	89 89       	ldd	r24, Y+17	; 0x11
 68a:	9a 89       	ldd	r25, Y+18	; 0x12
 68c:	89 2b       	or	r24, r25
 68e:	69 f7       	brne	.-38     	; 0x66a <__EEPROM_REGION_LENGTH__+0x26a>
 690:	14 c0       	rjmp	.+40     	; 0x6ba <__EEPROM_REGION_LENGTH__+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 692:	6d 85       	ldd	r22, Y+13	; 0x0d
 694:	7e 85       	ldd	r23, Y+14	; 0x0e
 696:	8f 85       	ldd	r24, Y+15	; 0x0f
 698:	98 89       	ldd	r25, Y+16	; 0x10
 69a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__fixunssfsi>
 69e:	dc 01       	movw	r26, r24
 6a0:	cb 01       	movw	r24, r22
 6a2:	9a 8b       	std	Y+18, r25	; 0x12
 6a4:	89 8b       	std	Y+17, r24	; 0x11
 6a6:	89 89       	ldd	r24, Y+17	; 0x11
 6a8:	9a 89       	ldd	r25, Y+18	; 0x12
 6aa:	9e 8b       	std	Y+22, r25	; 0x16
 6ac:	8d 8b       	std	Y+21, r24	; 0x15
 6ae:	8d 89       	ldd	r24, Y+21	; 0x15
 6b0:	9e 89       	ldd	r25, Y+22	; 0x16
 6b2:	01 97       	sbiw	r24, 0x01	; 1
 6b4:	f1 f7       	brne	.-4      	; 0x6b2 <__EEPROM_REGION_LENGTH__+0x2b2>
 6b6:	9e 8b       	std	Y+22, r25	; 0x16
 6b8:	8d 8b       	std	Y+21, r24	; 0x15
		_delay_ms(500);

	}
 6ba:	73 ce       	rjmp	.-794    	; 0x3a2 <main+0x46>

000006bc <__cmpsf2>:
 6bc:	0e 94 92 03 	call	0x724	; 0x724 <__fp_cmp>
 6c0:	08 f4       	brcc	.+2      	; 0x6c4 <__cmpsf2+0x8>
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	08 95       	ret

000006c6 <__fixunssfsi>:
 6c6:	0e 94 be 03 	call	0x77c	; 0x77c <__fp_splitA>
 6ca:	88 f0       	brcs	.+34     	; 0x6ee <__fixunssfsi+0x28>
 6cc:	9f 57       	subi	r25, 0x7F	; 127
 6ce:	98 f0       	brcs	.+38     	; 0x6f6 <__fixunssfsi+0x30>
 6d0:	b9 2f       	mov	r27, r25
 6d2:	99 27       	eor	r25, r25
 6d4:	b7 51       	subi	r27, 0x17	; 23
 6d6:	b0 f0       	brcs	.+44     	; 0x704 <__fixunssfsi+0x3e>
 6d8:	e1 f0       	breq	.+56     	; 0x712 <__fixunssfsi+0x4c>
 6da:	66 0f       	add	r22, r22
 6dc:	77 1f       	adc	r23, r23
 6de:	88 1f       	adc	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	1a f0       	brmi	.+6      	; 0x6ea <__fixunssfsi+0x24>
 6e4:	ba 95       	dec	r27
 6e6:	c9 f7       	brne	.-14     	; 0x6da <__fixunssfsi+0x14>
 6e8:	14 c0       	rjmp	.+40     	; 0x712 <__fixunssfsi+0x4c>
 6ea:	b1 30       	cpi	r27, 0x01	; 1
 6ec:	91 f0       	breq	.+36     	; 0x712 <__fixunssfsi+0x4c>
 6ee:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__fp_zero>
 6f2:	b1 e0       	ldi	r27, 0x01	; 1
 6f4:	08 95       	ret
 6f6:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__fp_zero>
 6fa:	67 2f       	mov	r22, r23
 6fc:	78 2f       	mov	r23, r24
 6fe:	88 27       	eor	r24, r24
 700:	b8 5f       	subi	r27, 0xF8	; 248
 702:	39 f0       	breq	.+14     	; 0x712 <__fixunssfsi+0x4c>
 704:	b9 3f       	cpi	r27, 0xF9	; 249
 706:	cc f3       	brlt	.-14     	; 0x6fa <__fixunssfsi+0x34>
 708:	86 95       	lsr	r24
 70a:	77 95       	ror	r23
 70c:	67 95       	ror	r22
 70e:	b3 95       	inc	r27
 710:	d9 f7       	brne	.-10     	; 0x708 <__fixunssfsi+0x42>
 712:	3e f4       	brtc	.+14     	; 0x722 <__fixunssfsi+0x5c>
 714:	90 95       	com	r25
 716:	80 95       	com	r24
 718:	70 95       	com	r23
 71a:	61 95       	neg	r22
 71c:	7f 4f       	sbci	r23, 0xFF	; 255
 71e:	8f 4f       	sbci	r24, 0xFF	; 255
 720:	9f 4f       	sbci	r25, 0xFF	; 255
 722:	08 95       	ret

00000724 <__fp_cmp>:
 724:	99 0f       	add	r25, r25
 726:	00 08       	sbc	r0, r0
 728:	55 0f       	add	r21, r21
 72a:	aa 0b       	sbc	r26, r26
 72c:	e0 e8       	ldi	r30, 0x80	; 128
 72e:	fe ef       	ldi	r31, 0xFE	; 254
 730:	16 16       	cp	r1, r22
 732:	17 06       	cpc	r1, r23
 734:	e8 07       	cpc	r30, r24
 736:	f9 07       	cpc	r31, r25
 738:	c0 f0       	brcs	.+48     	; 0x76a <__fp_cmp+0x46>
 73a:	12 16       	cp	r1, r18
 73c:	13 06       	cpc	r1, r19
 73e:	e4 07       	cpc	r30, r20
 740:	f5 07       	cpc	r31, r21
 742:	98 f0       	brcs	.+38     	; 0x76a <__fp_cmp+0x46>
 744:	62 1b       	sub	r22, r18
 746:	73 0b       	sbc	r23, r19
 748:	84 0b       	sbc	r24, r20
 74a:	95 0b       	sbc	r25, r21
 74c:	39 f4       	brne	.+14     	; 0x75c <__fp_cmp+0x38>
 74e:	0a 26       	eor	r0, r26
 750:	61 f0       	breq	.+24     	; 0x76a <__fp_cmp+0x46>
 752:	23 2b       	or	r18, r19
 754:	24 2b       	or	r18, r20
 756:	25 2b       	or	r18, r21
 758:	21 f4       	brne	.+8      	; 0x762 <__fp_cmp+0x3e>
 75a:	08 95       	ret
 75c:	0a 26       	eor	r0, r26
 75e:	09 f4       	brne	.+2      	; 0x762 <__fp_cmp+0x3e>
 760:	a1 40       	sbci	r26, 0x01	; 1
 762:	a6 95       	lsr	r26
 764:	8f ef       	ldi	r24, 0xFF	; 255
 766:	81 1d       	adc	r24, r1
 768:	81 1d       	adc	r24, r1
 76a:	08 95       	ret

0000076c <__fp_split3>:
 76c:	57 fd       	sbrc	r21, 7
 76e:	90 58       	subi	r25, 0x80	; 128
 770:	44 0f       	add	r20, r20
 772:	55 1f       	adc	r21, r21
 774:	59 f0       	breq	.+22     	; 0x78c <__fp_splitA+0x10>
 776:	5f 3f       	cpi	r21, 0xFF	; 255
 778:	71 f0       	breq	.+28     	; 0x796 <__fp_splitA+0x1a>
 77a:	47 95       	ror	r20

0000077c <__fp_splitA>:
 77c:	88 0f       	add	r24, r24
 77e:	97 fb       	bst	r25, 7
 780:	99 1f       	adc	r25, r25
 782:	61 f0       	breq	.+24     	; 0x79c <__fp_splitA+0x20>
 784:	9f 3f       	cpi	r25, 0xFF	; 255
 786:	79 f0       	breq	.+30     	; 0x7a6 <__fp_splitA+0x2a>
 788:	87 95       	ror	r24
 78a:	08 95       	ret
 78c:	12 16       	cp	r1, r18
 78e:	13 06       	cpc	r1, r19
 790:	14 06       	cpc	r1, r20
 792:	55 1f       	adc	r21, r21
 794:	f2 cf       	rjmp	.-28     	; 0x77a <__fp_split3+0xe>
 796:	46 95       	lsr	r20
 798:	f1 df       	rcall	.-30     	; 0x77c <__fp_splitA>
 79a:	08 c0       	rjmp	.+16     	; 0x7ac <__fp_splitA+0x30>
 79c:	16 16       	cp	r1, r22
 79e:	17 06       	cpc	r1, r23
 7a0:	18 06       	cpc	r1, r24
 7a2:	99 1f       	adc	r25, r25
 7a4:	f1 cf       	rjmp	.-30     	; 0x788 <__fp_splitA+0xc>
 7a6:	86 95       	lsr	r24
 7a8:	71 05       	cpc	r23, r1
 7aa:	61 05       	cpc	r22, r1
 7ac:	08 94       	sec
 7ae:	08 95       	ret

000007b0 <__fp_zero>:
 7b0:	e8 94       	clt

000007b2 <__fp_szero>:
 7b2:	bb 27       	eor	r27, r27
 7b4:	66 27       	eor	r22, r22
 7b6:	77 27       	eor	r23, r23
 7b8:	cb 01       	movw	r24, r22
 7ba:	97 f9       	bld	r25, 7
 7bc:	08 95       	ret

000007be <__gesf2>:
 7be:	0e 94 92 03 	call	0x724	; 0x724 <__fp_cmp>
 7c2:	08 f4       	brcc	.+2      	; 0x7c6 <__gesf2+0x8>
 7c4:	8f ef       	ldi	r24, 0xFF	; 255
 7c6:	08 95       	ret

000007c8 <__mulsf3>:
 7c8:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__mulsf3x>
 7cc:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__fp_round>
 7d0:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fp_pscA>
 7d4:	38 f0       	brcs	.+14     	; 0x7e4 <__mulsf3+0x1c>
 7d6:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__fp_pscB>
 7da:	20 f0       	brcs	.+8      	; 0x7e4 <__mulsf3+0x1c>
 7dc:	95 23       	and	r25, r21
 7de:	11 f0       	breq	.+4      	; 0x7e4 <__mulsf3+0x1c>
 7e0:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_inf>
 7e4:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__fp_nan>
 7e8:	11 24       	eor	r1, r1
 7ea:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__fp_szero>

000007ee <__mulsf3x>:
 7ee:	0e 94 b6 03 	call	0x76c	; 0x76c <__fp_split3>
 7f2:	70 f3       	brcs	.-36     	; 0x7d0 <__mulsf3+0x8>

000007f4 <__mulsf3_pse>:
 7f4:	95 9f       	mul	r25, r21
 7f6:	c1 f3       	breq	.-16     	; 0x7e8 <__mulsf3+0x20>
 7f8:	95 0f       	add	r25, r21
 7fa:	50 e0       	ldi	r21, 0x00	; 0
 7fc:	55 1f       	adc	r21, r21
 7fe:	62 9f       	mul	r22, r18
 800:	f0 01       	movw	r30, r0
 802:	72 9f       	mul	r23, r18
 804:	bb 27       	eor	r27, r27
 806:	f0 0d       	add	r31, r0
 808:	b1 1d       	adc	r27, r1
 80a:	63 9f       	mul	r22, r19
 80c:	aa 27       	eor	r26, r26
 80e:	f0 0d       	add	r31, r0
 810:	b1 1d       	adc	r27, r1
 812:	aa 1f       	adc	r26, r26
 814:	64 9f       	mul	r22, r20
 816:	66 27       	eor	r22, r22
 818:	b0 0d       	add	r27, r0
 81a:	a1 1d       	adc	r26, r1
 81c:	66 1f       	adc	r22, r22
 81e:	82 9f       	mul	r24, r18
 820:	22 27       	eor	r18, r18
 822:	b0 0d       	add	r27, r0
 824:	a1 1d       	adc	r26, r1
 826:	62 1f       	adc	r22, r18
 828:	73 9f       	mul	r23, r19
 82a:	b0 0d       	add	r27, r0
 82c:	a1 1d       	adc	r26, r1
 82e:	62 1f       	adc	r22, r18
 830:	83 9f       	mul	r24, r19
 832:	a0 0d       	add	r26, r0
 834:	61 1d       	adc	r22, r1
 836:	22 1f       	adc	r18, r18
 838:	74 9f       	mul	r23, r20
 83a:	33 27       	eor	r19, r19
 83c:	a0 0d       	add	r26, r0
 83e:	61 1d       	adc	r22, r1
 840:	23 1f       	adc	r18, r19
 842:	84 9f       	mul	r24, r20
 844:	60 0d       	add	r22, r0
 846:	21 1d       	adc	r18, r1
 848:	82 2f       	mov	r24, r18
 84a:	76 2f       	mov	r23, r22
 84c:	6a 2f       	mov	r22, r26
 84e:	11 24       	eor	r1, r1
 850:	9f 57       	subi	r25, 0x7F	; 127
 852:	50 40       	sbci	r21, 0x00	; 0
 854:	9a f0       	brmi	.+38     	; 0x87c <__stack+0x1d>
 856:	f1 f0       	breq	.+60     	; 0x894 <__stack+0x35>
 858:	88 23       	and	r24, r24
 85a:	4a f0       	brmi	.+18     	; 0x86e <__stack+0xf>
 85c:	ee 0f       	add	r30, r30
 85e:	ff 1f       	adc	r31, r31
 860:	bb 1f       	adc	r27, r27
 862:	66 1f       	adc	r22, r22
 864:	77 1f       	adc	r23, r23
 866:	88 1f       	adc	r24, r24
 868:	91 50       	subi	r25, 0x01	; 1
 86a:	50 40       	sbci	r21, 0x00	; 0
 86c:	a9 f7       	brne	.-22     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 86e:	9e 3f       	cpi	r25, 0xFE	; 254
 870:	51 05       	cpc	r21, r1
 872:	80 f0       	brcs	.+32     	; 0x894 <__stack+0x35>
 874:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_inf>
 878:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__fp_szero>
 87c:	5f 3f       	cpi	r21, 0xFF	; 255
 87e:	e4 f3       	brlt	.-8      	; 0x878 <__stack+0x19>
 880:	98 3e       	cpi	r25, 0xE8	; 232
 882:	d4 f3       	brlt	.-12     	; 0x878 <__stack+0x19>
 884:	86 95       	lsr	r24
 886:	77 95       	ror	r23
 888:	67 95       	ror	r22
 88a:	b7 95       	ror	r27
 88c:	f7 95       	ror	r31
 88e:	e7 95       	ror	r30
 890:	9f 5f       	subi	r25, 0xFF	; 255
 892:	c1 f7       	brne	.-16     	; 0x884 <__stack+0x25>
 894:	fe 2b       	or	r31, r30
 896:	88 0f       	add	r24, r24
 898:	91 1d       	adc	r25, r1
 89a:	96 95       	lsr	r25
 89c:	87 95       	ror	r24
 89e:	97 f9       	bld	r25, 7
 8a0:	08 95       	ret

000008a2 <__fp_inf>:
 8a2:	97 f9       	bld	r25, 7
 8a4:	9f 67       	ori	r25, 0x7F	; 127
 8a6:	80 e8       	ldi	r24, 0x80	; 128
 8a8:	70 e0       	ldi	r23, 0x00	; 0
 8aa:	60 e0       	ldi	r22, 0x00	; 0
 8ac:	08 95       	ret

000008ae <__fp_nan>:
 8ae:	9f ef       	ldi	r25, 0xFF	; 255
 8b0:	80 ec       	ldi	r24, 0xC0	; 192
 8b2:	08 95       	ret

000008b4 <__fp_pscA>:
 8b4:	00 24       	eor	r0, r0
 8b6:	0a 94       	dec	r0
 8b8:	16 16       	cp	r1, r22
 8ba:	17 06       	cpc	r1, r23
 8bc:	18 06       	cpc	r1, r24
 8be:	09 06       	cpc	r0, r25
 8c0:	08 95       	ret

000008c2 <__fp_pscB>:
 8c2:	00 24       	eor	r0, r0
 8c4:	0a 94       	dec	r0
 8c6:	12 16       	cp	r1, r18
 8c8:	13 06       	cpc	r1, r19
 8ca:	14 06       	cpc	r1, r20
 8cc:	05 06       	cpc	r0, r21
 8ce:	08 95       	ret

000008d0 <__fp_round>:
 8d0:	09 2e       	mov	r0, r25
 8d2:	03 94       	inc	r0
 8d4:	00 0c       	add	r0, r0
 8d6:	11 f4       	brne	.+4      	; 0x8dc <__fp_round+0xc>
 8d8:	88 23       	and	r24, r24
 8da:	52 f0       	brmi	.+20     	; 0x8f0 <__fp_round+0x20>
 8dc:	bb 0f       	add	r27, r27
 8de:	40 f4       	brcc	.+16     	; 0x8f0 <__fp_round+0x20>
 8e0:	bf 2b       	or	r27, r31
 8e2:	11 f4       	brne	.+4      	; 0x8e8 <__fp_round+0x18>
 8e4:	60 ff       	sbrs	r22, 0
 8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__fp_round+0x20>
 8e8:	6f 5f       	subi	r22, 0xFF	; 255
 8ea:	7f 4f       	sbci	r23, 0xFF	; 255
 8ec:	8f 4f       	sbci	r24, 0xFF	; 255
 8ee:	9f 4f       	sbci	r25, 0xFF	; 255
 8f0:	08 95       	ret

000008f2 <_exit>:
 8f2:	f8 94       	cli

000008f4 <__stop_program>:
 8f4:	ff cf       	rjmp	.-2      	; 0x8f4 <__stop_program>

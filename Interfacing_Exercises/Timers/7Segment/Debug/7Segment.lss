
7Segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000958  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000958  000009cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000009d8  00000000  00000000  000009cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bf3  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001f97  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001fa8  2**2
                  CONTENTS, READONLY
  6 .debug_info   000004e6  00000000  00000000  00001fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a3  00000000  00000000  000024ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000296d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00002987  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	5c 00       	.word	0x005c	; ????
  56:	9c 00       	.word	0x009c	; ????
  58:	dc 00       	.word	0x00dc	; ????
  5a:	1c 01       	movw	r2, r24
  5c:	5c 01       	movw	r10, r24
  5e:	9c 01       	movw	r18, r24
  60:	dc 01       	movw	r26, r24
  62:	1c 02       	muls	r17, r28
  64:	5c 02       	muls	r21, r28
  66:	9c 02       	muls	r25, r28

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <main>
  78:	0c 94 aa 04 	jmp	0x954	; 0x954 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Eta32mini_SevenSegment_Display>:
#include <util/delay.h>
//#include "timer.h"
#define SET_BIT(PORT,PIN) (PORT |=(1<<PIN))
#define CLR_BIT(PORT,PIN) (PORT &=~(1<<PIN))

void Eta32mini_SevenSegment_Display(unsigned char value) {
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	1f 92       	push	r1
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	89 83       	std	Y+1, r24	; 0x01
	switch (value) {
  8c:	89 81       	ldd	r24, Y+1	; 0x01
  8e:	88 2f       	mov	r24, r24
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	09 2e       	mov	r0, r25
  94:	00 0c       	add	r0, r0
  96:	aa 0b       	sbc	r26, r26
  98:	bb 0b       	sbc	r27, r27
  9a:	40 e0       	ldi	r20, 0x00	; 0
  9c:	50 e0       	ldi	r21, 0x00	; 0
  9e:	29 e0       	ldi	r18, 0x09	; 9
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	84 1b       	sub	r24, r20
  a4:	95 0b       	sbc	r25, r21
  a6:	28 17       	cp	r18, r24
  a8:	39 07       	cpc	r19, r25
  aa:	08 f4       	brcc	.+2      	; 0xae <Eta32mini_SevenSegment_Display+0x2e>
  ac:	85 c2       	rjmp	.+1290   	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
  ae:	86 5d       	subi	r24, 0xD6	; 214
  b0:	9f 4f       	sbci	r25, 0xFF	; 255
  b2:	fc 01       	movw	r30, r24
  b4:	0c 94 89 03 	jmp	0x712	; 0x712 <__tablejump2__>
	case 0:
		CLR_BIT(PORTC, 1);
  b8:	85 e3       	ldi	r24, 0x35	; 53
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	25 e3       	ldi	r18, 0x35	; 53
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	f9 01       	movw	r30, r18
  c2:	20 81       	ld	r18, Z
  c4:	2d 7f       	andi	r18, 0xFD	; 253
  c6:	fc 01       	movw	r30, r24
  c8:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 2);
  ca:	85 e3       	ldi	r24, 0x35	; 53
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	25 e3       	ldi	r18, 0x35	; 53
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	f9 01       	movw	r30, r18
  d4:	20 81       	ld	r18, Z
  d6:	2b 7f       	andi	r18, 0xFB	; 251
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 3);
  dc:	85 e3       	ldi	r24, 0x35	; 53
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	25 e3       	ldi	r18, 0x35	; 53
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	f9 01       	movw	r30, r18
  e6:	20 81       	ld	r18, Z
  e8:	27 7f       	andi	r18, 0xF7	; 247
  ea:	fc 01       	movw	r30, r24
  ec:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 4);
  ee:	85 e3       	ldi	r24, 0x35	; 53
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	25 e3       	ldi	r18, 0x35	; 53
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	f9 01       	movw	r30, r18
  f8:	20 81       	ld	r18, Z
  fa:	2f 7e       	andi	r18, 0xEF	; 239
  fc:	fc 01       	movw	r30, r24
  fe:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 5);
 100:	85 e3       	ldi	r24, 0x35	; 53
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	25 e3       	ldi	r18, 0x35	; 53
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	f9 01       	movw	r30, r18
 10a:	20 81       	ld	r18, Z
 10c:	2f 7d       	andi	r18, 0xDF	; 223
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 6);
 112:	85 e3       	ldi	r24, 0x35	; 53
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	25 e3       	ldi	r18, 0x35	; 53
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	f9 01       	movw	r30, r18
 11c:	20 81       	ld	r18, Z
 11e:	2f 7b       	andi	r18, 0xBF	; 191
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
		SET_BIT(PORTC, 7);
 124:	85 e3       	ldi	r24, 0x35	; 53
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	25 e3       	ldi	r18, 0x35	; 53
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	f9 01       	movw	r30, r18
 12e:	20 81       	ld	r18, Z
 130:	20 68       	ori	r18, 0x80	; 128
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
		break;
 136:	40 c2       	rjmp	.+1152   	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
	case 1:
		SET_BIT(PORTC, 1);
 138:	85 e3       	ldi	r24, 0x35	; 53
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	25 e3       	ldi	r18, 0x35	; 53
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	f9 01       	movw	r30, r18
 142:	20 81       	ld	r18, Z
 144:	22 60       	ori	r18, 0x02	; 2
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 2);
 14a:	85 e3       	ldi	r24, 0x35	; 53
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	25 e3       	ldi	r18, 0x35	; 53
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	f9 01       	movw	r30, r18
 154:	20 81       	ld	r18, Z
 156:	2b 7f       	andi	r18, 0xFB	; 251
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 3);
 15c:	85 e3       	ldi	r24, 0x35	; 53
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	25 e3       	ldi	r18, 0x35	; 53
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	f9 01       	movw	r30, r18
 166:	20 81       	ld	r18, Z
 168:	27 7f       	andi	r18, 0xF7	; 247
 16a:	fc 01       	movw	r30, r24
 16c:	20 83       	st	Z, r18
		SET_BIT(PORTC, 4);
 16e:	85 e3       	ldi	r24, 0x35	; 53
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	25 e3       	ldi	r18, 0x35	; 53
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	f9 01       	movw	r30, r18
 178:	20 81       	ld	r18, Z
 17a:	20 61       	ori	r18, 0x10	; 16
 17c:	fc 01       	movw	r30, r24
 17e:	20 83       	st	Z, r18
		SET_BIT(PORTC, 5);
 180:	85 e3       	ldi	r24, 0x35	; 53
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	25 e3       	ldi	r18, 0x35	; 53
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	f9 01       	movw	r30, r18
 18a:	20 81       	ld	r18, Z
 18c:	20 62       	ori	r18, 0x20	; 32
 18e:	fc 01       	movw	r30, r24
 190:	20 83       	st	Z, r18
		SET_BIT(PORTC, 6);
 192:	85 e3       	ldi	r24, 0x35	; 53
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	25 e3       	ldi	r18, 0x35	; 53
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	f9 01       	movw	r30, r18
 19c:	20 81       	ld	r18, Z
 19e:	20 64       	ori	r18, 0x40	; 64
 1a0:	fc 01       	movw	r30, r24
 1a2:	20 83       	st	Z, r18
		SET_BIT(PORTC, 7);
 1a4:	85 e3       	ldi	r24, 0x35	; 53
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	25 e3       	ldi	r18, 0x35	; 53
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	f9 01       	movw	r30, r18
 1ae:	20 81       	ld	r18, Z
 1b0:	20 68       	ori	r18, 0x80	; 128
 1b2:	fc 01       	movw	r30, r24
 1b4:	20 83       	st	Z, r18
		break;
 1b6:	00 c2       	rjmp	.+1024   	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
	case 2:
		CLR_BIT(PORTC, 1);
 1b8:	85 e3       	ldi	r24, 0x35	; 53
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	25 e3       	ldi	r18, 0x35	; 53
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	f9 01       	movw	r30, r18
 1c2:	20 81       	ld	r18, Z
 1c4:	2d 7f       	andi	r18, 0xFD	; 253
 1c6:	fc 01       	movw	r30, r24
 1c8:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 2);
 1ca:	85 e3       	ldi	r24, 0x35	; 53
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	25 e3       	ldi	r18, 0x35	; 53
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	f9 01       	movw	r30, r18
 1d4:	20 81       	ld	r18, Z
 1d6:	2b 7f       	andi	r18, 0xFB	; 251
 1d8:	fc 01       	movw	r30, r24
 1da:	20 83       	st	Z, r18
		SET_BIT(PORTC, 3);
 1dc:	85 e3       	ldi	r24, 0x35	; 53
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	25 e3       	ldi	r18, 0x35	; 53
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	f9 01       	movw	r30, r18
 1e6:	20 81       	ld	r18, Z
 1e8:	28 60       	ori	r18, 0x08	; 8
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 4);
 1ee:	85 e3       	ldi	r24, 0x35	; 53
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	25 e3       	ldi	r18, 0x35	; 53
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	f9 01       	movw	r30, r18
 1f8:	20 81       	ld	r18, Z
 1fa:	2f 7e       	andi	r18, 0xEF	; 239
 1fc:	fc 01       	movw	r30, r24
 1fe:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 5);
 200:	85 e3       	ldi	r24, 0x35	; 53
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	25 e3       	ldi	r18, 0x35	; 53
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	f9 01       	movw	r30, r18
 20a:	20 81       	ld	r18, Z
 20c:	2f 7d       	andi	r18, 0xDF	; 223
 20e:	fc 01       	movw	r30, r24
 210:	20 83       	st	Z, r18
		SET_BIT(PORTC, 6);
 212:	85 e3       	ldi	r24, 0x35	; 53
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	25 e3       	ldi	r18, 0x35	; 53
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	f9 01       	movw	r30, r18
 21c:	20 81       	ld	r18, Z
 21e:	20 64       	ori	r18, 0x40	; 64
 220:	fc 01       	movw	r30, r24
 222:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 7);
 224:	85 e3       	ldi	r24, 0x35	; 53
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	25 e3       	ldi	r18, 0x35	; 53
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	f9 01       	movw	r30, r18
 22e:	20 81       	ld	r18, Z
 230:	2f 77       	andi	r18, 0x7F	; 127
 232:	fc 01       	movw	r30, r24
 234:	20 83       	st	Z, r18
		break;
 236:	c0 c1       	rjmp	.+896    	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
	case 3:
		CLR_BIT(PORTC, 1);
 238:	85 e3       	ldi	r24, 0x35	; 53
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	25 e3       	ldi	r18, 0x35	; 53
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	f9 01       	movw	r30, r18
 242:	20 81       	ld	r18, Z
 244:	2d 7f       	andi	r18, 0xFD	; 253
 246:	fc 01       	movw	r30, r24
 248:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 2);
 24a:	85 e3       	ldi	r24, 0x35	; 53
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	25 e3       	ldi	r18, 0x35	; 53
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	f9 01       	movw	r30, r18
 254:	20 81       	ld	r18, Z
 256:	2b 7f       	andi	r18, 0xFB	; 251
 258:	fc 01       	movw	r30, r24
 25a:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 3);
 25c:	85 e3       	ldi	r24, 0x35	; 53
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	25 e3       	ldi	r18, 0x35	; 53
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	f9 01       	movw	r30, r18
 266:	20 81       	ld	r18, Z
 268:	27 7f       	andi	r18, 0xF7	; 247
 26a:	fc 01       	movw	r30, r24
 26c:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 4);
 26e:	85 e3       	ldi	r24, 0x35	; 53
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	25 e3       	ldi	r18, 0x35	; 53
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	f9 01       	movw	r30, r18
 278:	20 81       	ld	r18, Z
 27a:	2f 7e       	andi	r18, 0xEF	; 239
 27c:	fc 01       	movw	r30, r24
 27e:	20 83       	st	Z, r18
		SET_BIT(PORTC, 5);
 280:	85 e3       	ldi	r24, 0x35	; 53
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	25 e3       	ldi	r18, 0x35	; 53
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	f9 01       	movw	r30, r18
 28a:	20 81       	ld	r18, Z
 28c:	20 62       	ori	r18, 0x20	; 32
 28e:	fc 01       	movw	r30, r24
 290:	20 83       	st	Z, r18
		SET_BIT(PORTC, 6);
 292:	85 e3       	ldi	r24, 0x35	; 53
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	25 e3       	ldi	r18, 0x35	; 53
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	f9 01       	movw	r30, r18
 29c:	20 81       	ld	r18, Z
 29e:	20 64       	ori	r18, 0x40	; 64
 2a0:	fc 01       	movw	r30, r24
 2a2:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 7);
 2a4:	85 e3       	ldi	r24, 0x35	; 53
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	25 e3       	ldi	r18, 0x35	; 53
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	f9 01       	movw	r30, r18
 2ae:	20 81       	ld	r18, Z
 2b0:	2f 77       	andi	r18, 0x7F	; 127
 2b2:	fc 01       	movw	r30, r24
 2b4:	20 83       	st	Z, r18
		break;
 2b6:	80 c1       	rjmp	.+768    	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
	case 4:
		SET_BIT(PORTC, 1);
 2b8:	85 e3       	ldi	r24, 0x35	; 53
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	25 e3       	ldi	r18, 0x35	; 53
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	f9 01       	movw	r30, r18
 2c2:	20 81       	ld	r18, Z
 2c4:	22 60       	ori	r18, 0x02	; 2
 2c6:	fc 01       	movw	r30, r24
 2c8:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 2);
 2ca:	85 e3       	ldi	r24, 0x35	; 53
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	25 e3       	ldi	r18, 0x35	; 53
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	f9 01       	movw	r30, r18
 2d4:	20 81       	ld	r18, Z
 2d6:	2b 7f       	andi	r18, 0xFB	; 251
 2d8:	fc 01       	movw	r30, r24
 2da:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 3);
 2dc:	85 e3       	ldi	r24, 0x35	; 53
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	25 e3       	ldi	r18, 0x35	; 53
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	f9 01       	movw	r30, r18
 2e6:	20 81       	ld	r18, Z
 2e8:	27 7f       	andi	r18, 0xF7	; 247
 2ea:	fc 01       	movw	r30, r24
 2ec:	20 83       	st	Z, r18
		SET_BIT(PORTC, 4);
 2ee:	85 e3       	ldi	r24, 0x35	; 53
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	25 e3       	ldi	r18, 0x35	; 53
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	f9 01       	movw	r30, r18
 2f8:	20 81       	ld	r18, Z
 2fa:	20 61       	ori	r18, 0x10	; 16
 2fc:	fc 01       	movw	r30, r24
 2fe:	20 83       	st	Z, r18
		SET_BIT(PORTC, 5);
 300:	85 e3       	ldi	r24, 0x35	; 53
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	25 e3       	ldi	r18, 0x35	; 53
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	f9 01       	movw	r30, r18
 30a:	20 81       	ld	r18, Z
 30c:	20 62       	ori	r18, 0x20	; 32
 30e:	fc 01       	movw	r30, r24
 310:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 6);
 312:	85 e3       	ldi	r24, 0x35	; 53
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	25 e3       	ldi	r18, 0x35	; 53
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	f9 01       	movw	r30, r18
 31c:	20 81       	ld	r18, Z
 31e:	2f 7b       	andi	r18, 0xBF	; 191
 320:	fc 01       	movw	r30, r24
 322:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 7);
 324:	85 e3       	ldi	r24, 0x35	; 53
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	25 e3       	ldi	r18, 0x35	; 53
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	f9 01       	movw	r30, r18
 32e:	20 81       	ld	r18, Z
 330:	2f 77       	andi	r18, 0x7F	; 127
 332:	fc 01       	movw	r30, r24
 334:	20 83       	st	Z, r18
		break;
 336:	40 c1       	rjmp	.+640    	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
	case 5:
		CLR_BIT(PORTC, 1);
 338:	85 e3       	ldi	r24, 0x35	; 53
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	25 e3       	ldi	r18, 0x35	; 53
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	f9 01       	movw	r30, r18
 342:	20 81       	ld	r18, Z
 344:	2d 7f       	andi	r18, 0xFD	; 253
 346:	fc 01       	movw	r30, r24
 348:	20 83       	st	Z, r18
		SET_BIT(PORTC, 2);
 34a:	85 e3       	ldi	r24, 0x35	; 53
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	25 e3       	ldi	r18, 0x35	; 53
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	f9 01       	movw	r30, r18
 354:	20 81       	ld	r18, Z
 356:	24 60       	ori	r18, 0x04	; 4
 358:	fc 01       	movw	r30, r24
 35a:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 3);
 35c:	85 e3       	ldi	r24, 0x35	; 53
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	25 e3       	ldi	r18, 0x35	; 53
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	f9 01       	movw	r30, r18
 366:	20 81       	ld	r18, Z
 368:	27 7f       	andi	r18, 0xF7	; 247
 36a:	fc 01       	movw	r30, r24
 36c:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 4);
 36e:	85 e3       	ldi	r24, 0x35	; 53
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	25 e3       	ldi	r18, 0x35	; 53
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	f9 01       	movw	r30, r18
 378:	20 81       	ld	r18, Z
 37a:	2f 7e       	andi	r18, 0xEF	; 239
 37c:	fc 01       	movw	r30, r24
 37e:	20 83       	st	Z, r18
		SET_BIT(PORTC, 5);
 380:	85 e3       	ldi	r24, 0x35	; 53
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	25 e3       	ldi	r18, 0x35	; 53
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	f9 01       	movw	r30, r18
 38a:	20 81       	ld	r18, Z
 38c:	20 62       	ori	r18, 0x20	; 32
 38e:	fc 01       	movw	r30, r24
 390:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 6);
 392:	85 e3       	ldi	r24, 0x35	; 53
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	25 e3       	ldi	r18, 0x35	; 53
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	f9 01       	movw	r30, r18
 39c:	20 81       	ld	r18, Z
 39e:	2f 7b       	andi	r18, 0xBF	; 191
 3a0:	fc 01       	movw	r30, r24
 3a2:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 7);
 3a4:	85 e3       	ldi	r24, 0x35	; 53
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	25 e3       	ldi	r18, 0x35	; 53
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	f9 01       	movw	r30, r18
 3ae:	20 81       	ld	r18, Z
 3b0:	2f 77       	andi	r18, 0x7F	; 127
 3b2:	fc 01       	movw	r30, r24
 3b4:	20 83       	st	Z, r18
		break;
 3b6:	00 c1       	rjmp	.+512    	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
	case 6:
		CLR_BIT(PORTC, 1);
 3b8:	85 e3       	ldi	r24, 0x35	; 53
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	25 e3       	ldi	r18, 0x35	; 53
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	f9 01       	movw	r30, r18
 3c2:	20 81       	ld	r18, Z
 3c4:	2d 7f       	andi	r18, 0xFD	; 253
 3c6:	fc 01       	movw	r30, r24
 3c8:	20 83       	st	Z, r18
		SET_BIT(PORTC, 2);
 3ca:	85 e3       	ldi	r24, 0x35	; 53
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	25 e3       	ldi	r18, 0x35	; 53
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	f9 01       	movw	r30, r18
 3d4:	20 81       	ld	r18, Z
 3d6:	24 60       	ori	r18, 0x04	; 4
 3d8:	fc 01       	movw	r30, r24
 3da:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 3);
 3dc:	85 e3       	ldi	r24, 0x35	; 53
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	25 e3       	ldi	r18, 0x35	; 53
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	f9 01       	movw	r30, r18
 3e6:	20 81       	ld	r18, Z
 3e8:	27 7f       	andi	r18, 0xF7	; 247
 3ea:	fc 01       	movw	r30, r24
 3ec:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 4);
 3ee:	85 e3       	ldi	r24, 0x35	; 53
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	25 e3       	ldi	r18, 0x35	; 53
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	f9 01       	movw	r30, r18
 3f8:	20 81       	ld	r18, Z
 3fa:	2f 7e       	andi	r18, 0xEF	; 239
 3fc:	fc 01       	movw	r30, r24
 3fe:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 5);
 400:	85 e3       	ldi	r24, 0x35	; 53
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	25 e3       	ldi	r18, 0x35	; 53
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	f9 01       	movw	r30, r18
 40a:	20 81       	ld	r18, Z
 40c:	2f 7d       	andi	r18, 0xDF	; 223
 40e:	fc 01       	movw	r30, r24
 410:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 6);
 412:	85 e3       	ldi	r24, 0x35	; 53
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	25 e3       	ldi	r18, 0x35	; 53
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	f9 01       	movw	r30, r18
 41c:	20 81       	ld	r18, Z
 41e:	2f 7b       	andi	r18, 0xBF	; 191
 420:	fc 01       	movw	r30, r24
 422:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 7);
 424:	85 e3       	ldi	r24, 0x35	; 53
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	25 e3       	ldi	r18, 0x35	; 53
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	f9 01       	movw	r30, r18
 42e:	20 81       	ld	r18, Z
 430:	2f 77       	andi	r18, 0x7F	; 127
 432:	fc 01       	movw	r30, r24
 434:	20 83       	st	Z, r18
		break;
 436:	c0 c0       	rjmp	.+384    	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
	case 7:
		CLR_BIT(PORTC, 1);
 438:	85 e3       	ldi	r24, 0x35	; 53
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	25 e3       	ldi	r18, 0x35	; 53
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	f9 01       	movw	r30, r18
 442:	20 81       	ld	r18, Z
 444:	2d 7f       	andi	r18, 0xFD	; 253
 446:	fc 01       	movw	r30, r24
 448:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 2);
 44a:	85 e3       	ldi	r24, 0x35	; 53
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	25 e3       	ldi	r18, 0x35	; 53
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	f9 01       	movw	r30, r18
 454:	20 81       	ld	r18, Z
 456:	2b 7f       	andi	r18, 0xFB	; 251
 458:	fc 01       	movw	r30, r24
 45a:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 3);
 45c:	85 e3       	ldi	r24, 0x35	; 53
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	25 e3       	ldi	r18, 0x35	; 53
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	f9 01       	movw	r30, r18
 466:	20 81       	ld	r18, Z
 468:	27 7f       	andi	r18, 0xF7	; 247
 46a:	fc 01       	movw	r30, r24
 46c:	20 83       	st	Z, r18
		SET_BIT(PORTC, 4);
 46e:	85 e3       	ldi	r24, 0x35	; 53
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	25 e3       	ldi	r18, 0x35	; 53
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	f9 01       	movw	r30, r18
 478:	20 81       	ld	r18, Z
 47a:	20 61       	ori	r18, 0x10	; 16
 47c:	fc 01       	movw	r30, r24
 47e:	20 83       	st	Z, r18
		SET_BIT(PORTC, 5);
 480:	85 e3       	ldi	r24, 0x35	; 53
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	25 e3       	ldi	r18, 0x35	; 53
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	f9 01       	movw	r30, r18
 48a:	20 81       	ld	r18, Z
 48c:	20 62       	ori	r18, 0x20	; 32
 48e:	fc 01       	movw	r30, r24
 490:	20 83       	st	Z, r18
		SET_BIT(PORTC, 6);
 492:	85 e3       	ldi	r24, 0x35	; 53
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	25 e3       	ldi	r18, 0x35	; 53
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	f9 01       	movw	r30, r18
 49c:	20 81       	ld	r18, Z
 49e:	20 64       	ori	r18, 0x40	; 64
 4a0:	fc 01       	movw	r30, r24
 4a2:	20 83       	st	Z, r18
		SET_BIT(PORTC, 7);
 4a4:	85 e3       	ldi	r24, 0x35	; 53
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	25 e3       	ldi	r18, 0x35	; 53
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	f9 01       	movw	r30, r18
 4ae:	20 81       	ld	r18, Z
 4b0:	20 68       	ori	r18, 0x80	; 128
 4b2:	fc 01       	movw	r30, r24
 4b4:	20 83       	st	Z, r18
		break;
 4b6:	80 c0       	rjmp	.+256    	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
	case 8:
		CLR_BIT(PORTC, 1);
 4b8:	85 e3       	ldi	r24, 0x35	; 53
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	25 e3       	ldi	r18, 0x35	; 53
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	f9 01       	movw	r30, r18
 4c2:	20 81       	ld	r18, Z
 4c4:	2d 7f       	andi	r18, 0xFD	; 253
 4c6:	fc 01       	movw	r30, r24
 4c8:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 2);
 4ca:	85 e3       	ldi	r24, 0x35	; 53
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	25 e3       	ldi	r18, 0x35	; 53
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	f9 01       	movw	r30, r18
 4d4:	20 81       	ld	r18, Z
 4d6:	2b 7f       	andi	r18, 0xFB	; 251
 4d8:	fc 01       	movw	r30, r24
 4da:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 3);
 4dc:	85 e3       	ldi	r24, 0x35	; 53
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	25 e3       	ldi	r18, 0x35	; 53
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	f9 01       	movw	r30, r18
 4e6:	20 81       	ld	r18, Z
 4e8:	27 7f       	andi	r18, 0xF7	; 247
 4ea:	fc 01       	movw	r30, r24
 4ec:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 4);
 4ee:	85 e3       	ldi	r24, 0x35	; 53
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	25 e3       	ldi	r18, 0x35	; 53
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	f9 01       	movw	r30, r18
 4f8:	20 81       	ld	r18, Z
 4fa:	2f 7e       	andi	r18, 0xEF	; 239
 4fc:	fc 01       	movw	r30, r24
 4fe:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 5);
 500:	85 e3       	ldi	r24, 0x35	; 53
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	25 e3       	ldi	r18, 0x35	; 53
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	f9 01       	movw	r30, r18
 50a:	20 81       	ld	r18, Z
 50c:	2f 7d       	andi	r18, 0xDF	; 223
 50e:	fc 01       	movw	r30, r24
 510:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 6);
 512:	85 e3       	ldi	r24, 0x35	; 53
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	25 e3       	ldi	r18, 0x35	; 53
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	f9 01       	movw	r30, r18
 51c:	20 81       	ld	r18, Z
 51e:	2f 7b       	andi	r18, 0xBF	; 191
 520:	fc 01       	movw	r30, r24
 522:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 7);
 524:	85 e3       	ldi	r24, 0x35	; 53
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	25 e3       	ldi	r18, 0x35	; 53
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	f9 01       	movw	r30, r18
 52e:	20 81       	ld	r18, Z
 530:	2f 77       	andi	r18, 0x7F	; 127
 532:	fc 01       	movw	r30, r24
 534:	20 83       	st	Z, r18
		break;
 536:	40 c0       	rjmp	.+128    	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
	case 9:
		CLR_BIT(PORTC, 1);
 538:	85 e3       	ldi	r24, 0x35	; 53
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	25 e3       	ldi	r18, 0x35	; 53
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	f9 01       	movw	r30, r18
 542:	20 81       	ld	r18, Z
 544:	2d 7f       	andi	r18, 0xFD	; 253
 546:	fc 01       	movw	r30, r24
 548:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 2);
 54a:	85 e3       	ldi	r24, 0x35	; 53
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	25 e3       	ldi	r18, 0x35	; 53
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	f9 01       	movw	r30, r18
 554:	20 81       	ld	r18, Z
 556:	2b 7f       	andi	r18, 0xFB	; 251
 558:	fc 01       	movw	r30, r24
 55a:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 3);
 55c:	85 e3       	ldi	r24, 0x35	; 53
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	25 e3       	ldi	r18, 0x35	; 53
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	f9 01       	movw	r30, r18
 566:	20 81       	ld	r18, Z
 568:	27 7f       	andi	r18, 0xF7	; 247
 56a:	fc 01       	movw	r30, r24
 56c:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 4);
 56e:	85 e3       	ldi	r24, 0x35	; 53
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	25 e3       	ldi	r18, 0x35	; 53
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	f9 01       	movw	r30, r18
 578:	20 81       	ld	r18, Z
 57a:	2f 7e       	andi	r18, 0xEF	; 239
 57c:	fc 01       	movw	r30, r24
 57e:	20 83       	st	Z, r18
		SET_BIT(PORTC, 5);
 580:	85 e3       	ldi	r24, 0x35	; 53
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	25 e3       	ldi	r18, 0x35	; 53
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	f9 01       	movw	r30, r18
 58a:	20 81       	ld	r18, Z
 58c:	20 62       	ori	r18, 0x20	; 32
 58e:	fc 01       	movw	r30, r24
 590:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 6);
 592:	85 e3       	ldi	r24, 0x35	; 53
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	25 e3       	ldi	r18, 0x35	; 53
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	f9 01       	movw	r30, r18
 59c:	20 81       	ld	r18, Z
 59e:	2f 7b       	andi	r18, 0xBF	; 191
 5a0:	fc 01       	movw	r30, r24
 5a2:	20 83       	st	Z, r18
		CLR_BIT(PORTC, 7);
 5a4:	85 e3       	ldi	r24, 0x35	; 53
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	25 e3       	ldi	r18, 0x35	; 53
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	f9 01       	movw	r30, r18
 5ae:	20 81       	ld	r18, Z
 5b0:	2f 77       	andi	r18, 0x7F	; 127
 5b2:	fc 01       	movw	r30, r24
 5b4:	20 83       	st	Z, r18
		break;
 5b6:	00 00       	nop
	}
}
 5b8:	00 00       	nop
 5ba:	0f 90       	pop	r0
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	08 95       	ret

000005c2 <main>:
int main() {
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	cd b7       	in	r28, 0x3d	; 61
 5c8:	de b7       	in	r29, 0x3e	; 62
 5ca:	60 97       	sbiw	r28, 0x10	; 16
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	f8 94       	cli
 5d0:	de bf       	out	0x3e, r29	; 62
 5d2:	0f be       	out	0x3f, r0	; 63
 5d4:	cd bf       	out	0x3d, r28	; 61
	DDRC |= (1 << 0);        // configure pin 6 in PORTC as output pin
 5d6:	84 e3       	ldi	r24, 0x34	; 52
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	24 e3       	ldi	r18, 0x34	; 52
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	f9 01       	movw	r30, r18
 5e0:	20 81       	ld	r18, Z
 5e2:	21 60       	ori	r18, 0x01	; 1
 5e4:	fc 01       	movw	r30, r24
 5e6:	20 83       	st	Z, r18

	// Set pin 6 in PORTC with value 1 to enable the BJT NPN transistor to connect the first 7-segment common to the ground(common cathode)
	PORTC |= (1 << 0);
 5e8:	85 e3       	ldi	r24, 0x35	; 53
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	25 e3       	ldi	r18, 0x35	; 53
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	f9 01       	movw	r30, r18
 5f2:	20 81       	ld	r18, Z
 5f4:	21 60       	ori	r18, 0x01	; 1
 5f6:	fc 01       	movw	r30, r24
 5f8:	20 83       	st	Z, r18
	DDRC = 0xFF;
 5fa:	84 e3       	ldi	r24, 0x34	; 52
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	2f ef       	ldi	r18, 0xFF	; 255
 600:	fc 01       	movw	r30, r24
 602:	20 83       	st	Z, r18
	PORTC = 0;
 604:	85 e3       	ldi	r24, 0x35	; 53
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	fc 01       	movw	r30, r24
 60a:	10 82       	st	Z, r1
	while (1) {
		for (int i = 0; i <= 9; i++) {
 60c:	1a 82       	std	Y+2, r1	; 0x02
 60e:	19 82       	std	Y+1, r1	; 0x01
 610:	7a c0       	rjmp	.+244    	; 0x706 <main+0x144>
			Eta32mini_SevenSegment_Display(i);
 612:	89 81       	ldd	r24, Y+1	; 0x01
 614:	0e 94 40 00 	call	0x80	; 0x80 <Eta32mini_SevenSegment_Display>
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	aa e7       	ldi	r26, 0x7A	; 122
 61e:	b4 e4       	ldi	r27, 0x44	; 68
 620:	8b 83       	std	Y+3, r24	; 0x03
 622:	9c 83       	std	Y+4, r25	; 0x04
 624:	ad 83       	std	Y+5, r26	; 0x05
 626:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 628:	20 e0       	ldi	r18, 0x00	; 0
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	4a e7       	ldi	r20, 0x7A	; 122
 62e:	55 e4       	ldi	r21, 0x45	; 69
 630:	6b 81       	ldd	r22, Y+3	; 0x03
 632:	7c 81       	ldd	r23, Y+4	; 0x04
 634:	8d 81       	ldd	r24, Y+5	; 0x05
 636:	9e 81       	ldd	r25, Y+6	; 0x06
 638:	0e 94 15 04 	call	0x82a	; 0x82a <__mulsf3>
 63c:	dc 01       	movw	r26, r24
 63e:	cb 01       	movw	r24, r22
 640:	8f 83       	std	Y+7, r24	; 0x07
 642:	98 87       	std	Y+8, r25	; 0x08
 644:	a9 87       	std	Y+9, r26	; 0x09
 646:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 648:	20 e0       	ldi	r18, 0x00	; 0
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	40 e8       	ldi	r20, 0x80	; 128
 64e:	5f e3       	ldi	r21, 0x3F	; 63
 650:	6f 81       	ldd	r22, Y+7	; 0x07
 652:	78 85       	ldd	r23, Y+8	; 0x08
 654:	89 85       	ldd	r24, Y+9	; 0x09
 656:	9a 85       	ldd	r25, Y+10	; 0x0a
 658:	0e 94 8f 03 	call	0x71e	; 0x71e <__cmpsf2>
 65c:	88 23       	and	r24, r24
 65e:	2c f4       	brge	.+10     	; 0x66a <main+0xa8>
		__ticks = 1;
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	9c 87       	std	Y+12, r25	; 0x0c
 666:	8b 87       	std	Y+11, r24	; 0x0b
 668:	3f c0       	rjmp	.+126    	; 0x6e8 <main+0x126>
	else if (__tmp > 65535)
 66a:	20 e0       	ldi	r18, 0x00	; 0
 66c:	3f ef       	ldi	r19, 0xFF	; 255
 66e:	4f e7       	ldi	r20, 0x7F	; 127
 670:	57 e4       	ldi	r21, 0x47	; 71
 672:	6f 81       	ldd	r22, Y+7	; 0x07
 674:	78 85       	ldd	r23, Y+8	; 0x08
 676:	89 85       	ldd	r24, Y+9	; 0x09
 678:	9a 85       	ldd	r25, Y+10	; 0x0a
 67a:	0e 94 10 04 	call	0x820	; 0x820 <__gesf2>
 67e:	18 16       	cp	r1, r24
 680:	4c f5       	brge	.+82     	; 0x6d4 <main+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 682:	20 e0       	ldi	r18, 0x00	; 0
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	40 e2       	ldi	r20, 0x20	; 32
 688:	51 e4       	ldi	r21, 0x41	; 65
 68a:	6b 81       	ldd	r22, Y+3	; 0x03
 68c:	7c 81       	ldd	r23, Y+4	; 0x04
 68e:	8d 81       	ldd	r24, Y+5	; 0x05
 690:	9e 81       	ldd	r25, Y+6	; 0x06
 692:	0e 94 15 04 	call	0x82a	; 0x82a <__mulsf3>
 696:	dc 01       	movw	r26, r24
 698:	cb 01       	movw	r24, r22
 69a:	bc 01       	movw	r22, r24
 69c:	cd 01       	movw	r24, r26
 69e:	0e 94 94 03 	call	0x728	; 0x728 <__fixunssfsi>
 6a2:	dc 01       	movw	r26, r24
 6a4:	cb 01       	movw	r24, r22
 6a6:	9c 87       	std	Y+12, r25	; 0x0c
 6a8:	8b 87       	std	Y+11, r24	; 0x0b
 6aa:	0f c0       	rjmp	.+30     	; 0x6ca <main+0x108>
 6ac:	80 e9       	ldi	r24, 0x90	; 144
 6ae:	91 e0       	ldi	r25, 0x01	; 1
 6b0:	9e 87       	std	Y+14, r25	; 0x0e
 6b2:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 6b4:	8d 85       	ldd	r24, Y+13	; 0x0d
 6b6:	9e 85       	ldd	r25, Y+14	; 0x0e
 6b8:	01 97       	sbiw	r24, 0x01	; 1
 6ba:	f1 f7       	brne	.-4      	; 0x6b8 <main+0xf6>
 6bc:	9e 87       	std	Y+14, r25	; 0x0e
 6be:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6c0:	8b 85       	ldd	r24, Y+11	; 0x0b
 6c2:	9c 85       	ldd	r25, Y+12	; 0x0c
 6c4:	01 97       	sbiw	r24, 0x01	; 1
 6c6:	9c 87       	std	Y+12, r25	; 0x0c
 6c8:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6ca:	8b 85       	ldd	r24, Y+11	; 0x0b
 6cc:	9c 85       	ldd	r25, Y+12	; 0x0c
 6ce:	89 2b       	or	r24, r25
 6d0:	69 f7       	brne	.-38     	; 0x6ac <main+0xea>
 6d2:	14 c0       	rjmp	.+40     	; 0x6fc <main+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 6d4:	6f 81       	ldd	r22, Y+7	; 0x07
 6d6:	78 85       	ldd	r23, Y+8	; 0x08
 6d8:	89 85       	ldd	r24, Y+9	; 0x09
 6da:	9a 85       	ldd	r25, Y+10	; 0x0a
 6dc:	0e 94 94 03 	call	0x728	; 0x728 <__fixunssfsi>
 6e0:	dc 01       	movw	r26, r24
 6e2:	cb 01       	movw	r24, r22
 6e4:	9c 87       	std	Y+12, r25	; 0x0c
 6e6:	8b 87       	std	Y+11, r24	; 0x0b
 6e8:	8b 85       	ldd	r24, Y+11	; 0x0b
 6ea:	9c 85       	ldd	r25, Y+12	; 0x0c
 6ec:	98 8b       	std	Y+16, r25	; 0x10
 6ee:	8f 87       	std	Y+15, r24	; 0x0f
 6f0:	8f 85       	ldd	r24, Y+15	; 0x0f
 6f2:	98 89       	ldd	r25, Y+16	; 0x10
 6f4:	01 97       	sbiw	r24, 0x01	; 1
 6f6:	f1 f7       	brne	.-4      	; 0x6f4 <main+0x132>
 6f8:	98 8b       	std	Y+16, r25	; 0x10
 6fa:	8f 87       	std	Y+15, r24	; 0x0f
	// Set pin 6 in PORTC with value 1 to enable the BJT NPN transistor to connect the first 7-segment common to the ground(common cathode)
	PORTC |= (1 << 0);
	DDRC = 0xFF;
	PORTC = 0;
	while (1) {
		for (int i = 0; i <= 9; i++) {
 6fc:	89 81       	ldd	r24, Y+1	; 0x01
 6fe:	9a 81       	ldd	r25, Y+2	; 0x02
 700:	01 96       	adiw	r24, 0x01	; 1
 702:	9a 83       	std	Y+2, r25	; 0x02
 704:	89 83       	std	Y+1, r24	; 0x01
 706:	89 81       	ldd	r24, Y+1	; 0x01
 708:	9a 81       	ldd	r25, Y+2	; 0x02
 70a:	0a 97       	sbiw	r24, 0x0a	; 10
 70c:	0c f4       	brge	.+2      	; 0x710 <main+0x14e>
 70e:	81 cf       	rjmp	.-254    	; 0x612 <main+0x50>
			Eta32mini_SevenSegment_Display(i);
			_delay_ms(1000);
		}
	}
 710:	7d cf       	rjmp	.-262    	; 0x60c <main+0x4a>

00000712 <__tablejump2__>:
 712:	ee 0f       	add	r30, r30
 714:	ff 1f       	adc	r31, r31
 716:	05 90       	lpm	r0, Z+
 718:	f4 91       	lpm	r31, Z
 71a:	e0 2d       	mov	r30, r0
 71c:	09 94       	ijmp

0000071e <__cmpsf2>:
 71e:	0e 94 c3 03 	call	0x786	; 0x786 <__fp_cmp>
 722:	08 f4       	brcc	.+2      	; 0x726 <__cmpsf2+0x8>
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	08 95       	ret

00000728 <__fixunssfsi>:
 728:	0e 94 ef 03 	call	0x7de	; 0x7de <__fp_splitA>
 72c:	88 f0       	brcs	.+34     	; 0x750 <__fixunssfsi+0x28>
 72e:	9f 57       	subi	r25, 0x7F	; 127
 730:	98 f0       	brcs	.+38     	; 0x758 <__fixunssfsi+0x30>
 732:	b9 2f       	mov	r27, r25
 734:	99 27       	eor	r25, r25
 736:	b7 51       	subi	r27, 0x17	; 23
 738:	b0 f0       	brcs	.+44     	; 0x766 <__fixunssfsi+0x3e>
 73a:	e1 f0       	breq	.+56     	; 0x774 <__fixunssfsi+0x4c>
 73c:	66 0f       	add	r22, r22
 73e:	77 1f       	adc	r23, r23
 740:	88 1f       	adc	r24, r24
 742:	99 1f       	adc	r25, r25
 744:	1a f0       	brmi	.+6      	; 0x74c <__fixunssfsi+0x24>
 746:	ba 95       	dec	r27
 748:	c9 f7       	brne	.-14     	; 0x73c <__fixunssfsi+0x14>
 74a:	14 c0       	rjmp	.+40     	; 0x774 <__fixunssfsi+0x4c>
 74c:	b1 30       	cpi	r27, 0x01	; 1
 74e:	91 f0       	breq	.+36     	; 0x774 <__fixunssfsi+0x4c>
 750:	0e 94 09 04 	call	0x812	; 0x812 <__fp_zero>
 754:	b1 e0       	ldi	r27, 0x01	; 1
 756:	08 95       	ret
 758:	0c 94 09 04 	jmp	0x812	; 0x812 <__fp_zero>
 75c:	67 2f       	mov	r22, r23
 75e:	78 2f       	mov	r23, r24
 760:	88 27       	eor	r24, r24
 762:	b8 5f       	subi	r27, 0xF8	; 248
 764:	39 f0       	breq	.+14     	; 0x774 <__fixunssfsi+0x4c>
 766:	b9 3f       	cpi	r27, 0xF9	; 249
 768:	cc f3       	brlt	.-14     	; 0x75c <__fixunssfsi+0x34>
 76a:	86 95       	lsr	r24
 76c:	77 95       	ror	r23
 76e:	67 95       	ror	r22
 770:	b3 95       	inc	r27
 772:	d9 f7       	brne	.-10     	; 0x76a <__fixunssfsi+0x42>
 774:	3e f4       	brtc	.+14     	; 0x784 <__fixunssfsi+0x5c>
 776:	90 95       	com	r25
 778:	80 95       	com	r24
 77a:	70 95       	com	r23
 77c:	61 95       	neg	r22
 77e:	7f 4f       	sbci	r23, 0xFF	; 255
 780:	8f 4f       	sbci	r24, 0xFF	; 255
 782:	9f 4f       	sbci	r25, 0xFF	; 255
 784:	08 95       	ret

00000786 <__fp_cmp>:
 786:	99 0f       	add	r25, r25
 788:	00 08       	sbc	r0, r0
 78a:	55 0f       	add	r21, r21
 78c:	aa 0b       	sbc	r26, r26
 78e:	e0 e8       	ldi	r30, 0x80	; 128
 790:	fe ef       	ldi	r31, 0xFE	; 254
 792:	16 16       	cp	r1, r22
 794:	17 06       	cpc	r1, r23
 796:	e8 07       	cpc	r30, r24
 798:	f9 07       	cpc	r31, r25
 79a:	c0 f0       	brcs	.+48     	; 0x7cc <__fp_cmp+0x46>
 79c:	12 16       	cp	r1, r18
 79e:	13 06       	cpc	r1, r19
 7a0:	e4 07       	cpc	r30, r20
 7a2:	f5 07       	cpc	r31, r21
 7a4:	98 f0       	brcs	.+38     	; 0x7cc <__fp_cmp+0x46>
 7a6:	62 1b       	sub	r22, r18
 7a8:	73 0b       	sbc	r23, r19
 7aa:	84 0b       	sbc	r24, r20
 7ac:	95 0b       	sbc	r25, r21
 7ae:	39 f4       	brne	.+14     	; 0x7be <__fp_cmp+0x38>
 7b0:	0a 26       	eor	r0, r26
 7b2:	61 f0       	breq	.+24     	; 0x7cc <__fp_cmp+0x46>
 7b4:	23 2b       	or	r18, r19
 7b6:	24 2b       	or	r18, r20
 7b8:	25 2b       	or	r18, r21
 7ba:	21 f4       	brne	.+8      	; 0x7c4 <__fp_cmp+0x3e>
 7bc:	08 95       	ret
 7be:	0a 26       	eor	r0, r26
 7c0:	09 f4       	brne	.+2      	; 0x7c4 <__fp_cmp+0x3e>
 7c2:	a1 40       	sbci	r26, 0x01	; 1
 7c4:	a6 95       	lsr	r26
 7c6:	8f ef       	ldi	r24, 0xFF	; 255
 7c8:	81 1d       	adc	r24, r1
 7ca:	81 1d       	adc	r24, r1
 7cc:	08 95       	ret

000007ce <__fp_split3>:
 7ce:	57 fd       	sbrc	r21, 7
 7d0:	90 58       	subi	r25, 0x80	; 128
 7d2:	44 0f       	add	r20, r20
 7d4:	55 1f       	adc	r21, r21
 7d6:	59 f0       	breq	.+22     	; 0x7ee <__fp_splitA+0x10>
 7d8:	5f 3f       	cpi	r21, 0xFF	; 255
 7da:	71 f0       	breq	.+28     	; 0x7f8 <__fp_splitA+0x1a>
 7dc:	47 95       	ror	r20

000007de <__fp_splitA>:
 7de:	88 0f       	add	r24, r24
 7e0:	97 fb       	bst	r25, 7
 7e2:	99 1f       	adc	r25, r25
 7e4:	61 f0       	breq	.+24     	; 0x7fe <__fp_splitA+0x20>
 7e6:	9f 3f       	cpi	r25, 0xFF	; 255
 7e8:	79 f0       	breq	.+30     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7ea:	87 95       	ror	r24
 7ec:	08 95       	ret
 7ee:	12 16       	cp	r1, r18
 7f0:	13 06       	cpc	r1, r19
 7f2:	14 06       	cpc	r1, r20
 7f4:	55 1f       	adc	r21, r21
 7f6:	f2 cf       	rjmp	.-28     	; 0x7dc <__fp_split3+0xe>
 7f8:	46 95       	lsr	r20
 7fa:	f1 df       	rcall	.-30     	; 0x7de <__fp_splitA>
 7fc:	08 c0       	rjmp	.+16     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7fe:	16 16       	cp	r1, r22
 800:	17 06       	cpc	r1, r23
 802:	18 06       	cpc	r1, r24
 804:	99 1f       	adc	r25, r25
 806:	f1 cf       	rjmp	.-30     	; 0x7ea <__fp_splitA+0xc>
 808:	86 95       	lsr	r24
 80a:	71 05       	cpc	r23, r1
 80c:	61 05       	cpc	r22, r1
 80e:	08 94       	sec
 810:	08 95       	ret

00000812 <__fp_zero>:
 812:	e8 94       	clt

00000814 <__fp_szero>:
 814:	bb 27       	eor	r27, r27
 816:	66 27       	eor	r22, r22
 818:	77 27       	eor	r23, r23
 81a:	cb 01       	movw	r24, r22
 81c:	97 f9       	bld	r25, 7
 81e:	08 95       	ret

00000820 <__gesf2>:
 820:	0e 94 c3 03 	call	0x786	; 0x786 <__fp_cmp>
 824:	08 f4       	brcc	.+2      	; 0x828 <__gesf2+0x8>
 826:	8f ef       	ldi	r24, 0xFF	; 255
 828:	08 95       	ret

0000082a <__mulsf3>:
 82a:	0e 94 28 04 	call	0x850	; 0x850 <__mulsf3x>
 82e:	0c 94 99 04 	jmp	0x932	; 0x932 <__fp_round>
 832:	0e 94 8b 04 	call	0x916	; 0x916 <__fp_pscA>
 836:	38 f0       	brcs	.+14     	; 0x846 <__mulsf3+0x1c>
 838:	0e 94 92 04 	call	0x924	; 0x924 <__fp_pscB>
 83c:	20 f0       	brcs	.+8      	; 0x846 <__mulsf3+0x1c>
 83e:	95 23       	and	r25, r21
 840:	11 f0       	breq	.+4      	; 0x846 <__mulsf3+0x1c>
 842:	0c 94 82 04 	jmp	0x904	; 0x904 <__fp_inf>
 846:	0c 94 88 04 	jmp	0x910	; 0x910 <__fp_nan>
 84a:	11 24       	eor	r1, r1
 84c:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_szero>

00000850 <__mulsf3x>:
 850:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__fp_split3>
 854:	70 f3       	brcs	.-36     	; 0x832 <__mulsf3+0x8>

00000856 <__mulsf3_pse>:
 856:	95 9f       	mul	r25, r21
 858:	c1 f3       	breq	.-16     	; 0x84a <__mulsf3+0x20>
 85a:	95 0f       	add	r25, r21
 85c:	50 e0       	ldi	r21, 0x00	; 0
 85e:	55 1f       	adc	r21, r21
 860:	62 9f       	mul	r22, r18
 862:	f0 01       	movw	r30, r0
 864:	72 9f       	mul	r23, r18
 866:	bb 27       	eor	r27, r27
 868:	f0 0d       	add	r31, r0
 86a:	b1 1d       	adc	r27, r1
 86c:	63 9f       	mul	r22, r19
 86e:	aa 27       	eor	r26, r26
 870:	f0 0d       	add	r31, r0
 872:	b1 1d       	adc	r27, r1
 874:	aa 1f       	adc	r26, r26
 876:	64 9f       	mul	r22, r20
 878:	66 27       	eor	r22, r22
 87a:	b0 0d       	add	r27, r0
 87c:	a1 1d       	adc	r26, r1
 87e:	66 1f       	adc	r22, r22
 880:	82 9f       	mul	r24, r18
 882:	22 27       	eor	r18, r18
 884:	b0 0d       	add	r27, r0
 886:	a1 1d       	adc	r26, r1
 888:	62 1f       	adc	r22, r18
 88a:	73 9f       	mul	r23, r19
 88c:	b0 0d       	add	r27, r0
 88e:	a1 1d       	adc	r26, r1
 890:	62 1f       	adc	r22, r18
 892:	83 9f       	mul	r24, r19
 894:	a0 0d       	add	r26, r0
 896:	61 1d       	adc	r22, r1
 898:	22 1f       	adc	r18, r18
 89a:	74 9f       	mul	r23, r20
 89c:	33 27       	eor	r19, r19
 89e:	a0 0d       	add	r26, r0
 8a0:	61 1d       	adc	r22, r1
 8a2:	23 1f       	adc	r18, r19
 8a4:	84 9f       	mul	r24, r20
 8a6:	60 0d       	add	r22, r0
 8a8:	21 1d       	adc	r18, r1
 8aa:	82 2f       	mov	r24, r18
 8ac:	76 2f       	mov	r23, r22
 8ae:	6a 2f       	mov	r22, r26
 8b0:	11 24       	eor	r1, r1
 8b2:	9f 57       	subi	r25, 0x7F	; 127
 8b4:	50 40       	sbci	r21, 0x00	; 0
 8b6:	9a f0       	brmi	.+38     	; 0x8de <__stack+0x7f>
 8b8:	f1 f0       	breq	.+60     	; 0x8f6 <__stack+0x97>
 8ba:	88 23       	and	r24, r24
 8bc:	4a f0       	brmi	.+18     	; 0x8d0 <__stack+0x71>
 8be:	ee 0f       	add	r30, r30
 8c0:	ff 1f       	adc	r31, r31
 8c2:	bb 1f       	adc	r27, r27
 8c4:	66 1f       	adc	r22, r22
 8c6:	77 1f       	adc	r23, r23
 8c8:	88 1f       	adc	r24, r24
 8ca:	91 50       	subi	r25, 0x01	; 1
 8cc:	50 40       	sbci	r21, 0x00	; 0
 8ce:	a9 f7       	brne	.-22     	; 0x8ba <__stack+0x5b>
 8d0:	9e 3f       	cpi	r25, 0xFE	; 254
 8d2:	51 05       	cpc	r21, r1
 8d4:	80 f0       	brcs	.+32     	; 0x8f6 <__stack+0x97>
 8d6:	0c 94 82 04 	jmp	0x904	; 0x904 <__fp_inf>
 8da:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_szero>
 8de:	5f 3f       	cpi	r21, 0xFF	; 255
 8e0:	e4 f3       	brlt	.-8      	; 0x8da <__stack+0x7b>
 8e2:	98 3e       	cpi	r25, 0xE8	; 232
 8e4:	d4 f3       	brlt	.-12     	; 0x8da <__stack+0x7b>
 8e6:	86 95       	lsr	r24
 8e8:	77 95       	ror	r23
 8ea:	67 95       	ror	r22
 8ec:	b7 95       	ror	r27
 8ee:	f7 95       	ror	r31
 8f0:	e7 95       	ror	r30
 8f2:	9f 5f       	subi	r25, 0xFF	; 255
 8f4:	c1 f7       	brne	.-16     	; 0x8e6 <__stack+0x87>
 8f6:	fe 2b       	or	r31, r30
 8f8:	88 0f       	add	r24, r24
 8fa:	91 1d       	adc	r25, r1
 8fc:	96 95       	lsr	r25
 8fe:	87 95       	ror	r24
 900:	97 f9       	bld	r25, 7
 902:	08 95       	ret

00000904 <__fp_inf>:
 904:	97 f9       	bld	r25, 7
 906:	9f 67       	ori	r25, 0x7F	; 127
 908:	80 e8       	ldi	r24, 0x80	; 128
 90a:	70 e0       	ldi	r23, 0x00	; 0
 90c:	60 e0       	ldi	r22, 0x00	; 0
 90e:	08 95       	ret

00000910 <__fp_nan>:
 910:	9f ef       	ldi	r25, 0xFF	; 255
 912:	80 ec       	ldi	r24, 0xC0	; 192
 914:	08 95       	ret

00000916 <__fp_pscA>:
 916:	00 24       	eor	r0, r0
 918:	0a 94       	dec	r0
 91a:	16 16       	cp	r1, r22
 91c:	17 06       	cpc	r1, r23
 91e:	18 06       	cpc	r1, r24
 920:	09 06       	cpc	r0, r25
 922:	08 95       	ret

00000924 <__fp_pscB>:
 924:	00 24       	eor	r0, r0
 926:	0a 94       	dec	r0
 928:	12 16       	cp	r1, r18
 92a:	13 06       	cpc	r1, r19
 92c:	14 06       	cpc	r1, r20
 92e:	05 06       	cpc	r0, r21
 930:	08 95       	ret

00000932 <__fp_round>:
 932:	09 2e       	mov	r0, r25
 934:	03 94       	inc	r0
 936:	00 0c       	add	r0, r0
 938:	11 f4       	brne	.+4      	; 0x93e <__fp_round+0xc>
 93a:	88 23       	and	r24, r24
 93c:	52 f0       	brmi	.+20     	; 0x952 <__fp_round+0x20>
 93e:	bb 0f       	add	r27, r27
 940:	40 f4       	brcc	.+16     	; 0x952 <__fp_round+0x20>
 942:	bf 2b       	or	r27, r31
 944:	11 f4       	brne	.+4      	; 0x94a <__fp_round+0x18>
 946:	60 ff       	sbrs	r22, 0
 948:	04 c0       	rjmp	.+8      	; 0x952 <__fp_round+0x20>
 94a:	6f 5f       	subi	r22, 0xFF	; 255
 94c:	7f 4f       	sbci	r23, 0xFF	; 255
 94e:	8f 4f       	sbci	r24, 0xFF	; 255
 950:	9f 4f       	sbci	r25, 0xFF	; 255
 952:	08 95       	ret

00000954 <_exit>:
 954:	f8 94       	cli

00000956 <__stop_program>:
 956:	ff cf       	rjmp	.-2      	; 0x956 <__stop_program>
